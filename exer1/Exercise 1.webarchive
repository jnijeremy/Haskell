bplist00“_WebMainResource_WebSubresources’	
^WebResourceURL_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingName_WebResourceFrameName_6https://www.cs.sfu.ca/CourseCentral/383/ggbaker/exer/1O;ó<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
<title>Exercise 1</title>
<script type="text/javascript" src="/~ggbaker/js/main.js"></script>
<link rel="StyleSheet" href="/~ggbaker/style" media="all">
<link rev="Made" href="mailto:ggbaker@cs.sfu.ca">
<link rel="Copyright" href="/~ggbaker/copyright">
<link rel="icon" href="/~ggbaker/img/favicon.ico" type="image/x-icon">
<link rel="shortcut icon" href="/~ggbaker/img/favicon.ico" type="image/x-icon">
<meta name="MSSmartTagsPreventParsing" content="true">
<meta http-equiv="X-UA-Compatible" content="IE=edge env=best-standards-support">
<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
<meta name="author" content="Greg Baker">
<link rel="Up" href="./">
<script type="text/javascript" src="/~ggbaker/js/syntaxhighlighter/src/shCore.js"></script>
<link href="/~ggbaker/js/syntaxhighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="/~ggbaker/js/shBrushHaskell.js"></script>
<script type="text/javascript" src="/~ggbaker/js/shBrushGnuProlog.js"></script>
<script type="text/javascript" src="/~ggbaker/js/syntaxhighlighter/scripts/shBrushPython.js"></script>
<link type="text/css" rel="Stylesheet" href="/~ggbaker/js/syntaxhighlighter/styles/shThemeDefault.css">
<script type="text/javascript">
  SyntaxHighlighter.defaults['light'] = true;
  SyntaxHighlighter.all()
</script></head>
<body>
<h1>Exercise 1</h1>
<div id="main">



<p>
This exercise will be an introduction to working with the Haskell tools.  For this course, we will be using the Glasgow Haskell Compiler (but other Haskell implementations should be usable as well).
</p>
<p>
Some <a href="../haskell/#tools">links to the <abbr title="Glasgow Haskell Compiler">GHC</abbr> software</a> have been provided.  You will also find <abbr title="Glasgow Haskell Compiler">GHC</abbr> on the <acronym title="Computing Science Instructional Lab">CSIL</acronym> Linux computers.  The <a href="../haskell/">Haskell tutorials and references</a> on the same page may be helpful as well.
</p>
<ol>
  <li>
  <p>Start by getting <abbr title="Glasgow Haskell Compiler">GHC</abbr> installed (or going to <acronym title="Computing Science Instructional Lab">CSIL</acronym>).  We will start by using the <abbr title="Glasgow Haskell Compiler">GHC</abbr> interactive environment. (Type <code class="unix">ghci</code> at the Linux prompt to start it.)  Once <abbr title="Glasgow Haskell Compiler interactive environment">GHCi</abbr>  is started, you'll see a prompt like this:</p>
  <div class="blockcode"><div id="highlighter_222836" class="syntaxhighlighter nogutter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="content"><code class="plain">Prelude</code><code class="keyword bold">&gt;</code></td></tr></tbody></table></div></div></div></div>
  </li>
  <li>
  <p>You can start experimenting with Haskell at this prompt.</p>
  <p>Try typing some expressions at this prompt and look at the results.  Some example things to try:</p>
  <div class="blockcode"><div id="highlighter_105659" class="syntaxhighlighter nogutter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="content"><code class="value">9</code> <code class="keyword bold">*</code> <code class="value">4</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="value">1</code> <code class="keyword bold">+</code> <code class="value">2</code> <code class="keyword bold">*</code> <code class="value">3</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="value">1</code><code class="keyword bold">+</code><code class="value">1</code> <code class="keyword bold">==</code> <code class="value">2</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="value">2</code><code class="keyword bold">^</code><code class="value">300</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="functions bold">sum</code> <code class="plain">[</code><code class="value">1</code><code class="plain">,</code><code class="value">2</code><code class="plain">,</code><code class="value">3</code><code class="plain">,</code><code class="value">4</code><code class="plain">,</code><code class="value">5</code><code class="plain">]</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="plain">[</code><code class="value">1</code><code class="plain">,</code><code class="value">2</code><code class="plain">,</code><code class="value">3</code><code class="plain">] </code><code class="keyword bold">++</code> <code class="plain">[</code><code class="value">4</code><code class="plain">,</code><code class="value">5</code><code class="plain">]</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="functions bold">take</code> <code class="value">3</code> <code class="plain">[</code><code class="value">5</code><code class="plain">,</code><code class="value">6</code><code class="plain">,</code><code class="value">7</code><code class="plain">,</code><code class="value">8</code><code class="plain">,</code><code class="value">9</code><code class="plain">,</code><code class="value">10</code><code class="plain">]</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="functions bold">div</code> <code class="value">15</code> <code class="value">3</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="value">15</code> <code class="keyword bold">`div`</code> <code class="value">3</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="value">5</code> <code class="keyword bold">+</code> <code class="value">6</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="plain">(</code><code class="keyword bold">+</code><code class="plain">) </code><code class="value">5</code> <code class="value">6</code></td></tr></tbody></table></div></div></div></div>
  </li>
  <li>
  <p>In your favourite text editor, create a file <code class="file">exer1.hs</code> containing the following three function definitions (that calculate the discriminant and two solutions to a quadratic formula):</p>
  <div class="blockcode"><div id="highlighter_885235" class="syntaxhighlighter nogutter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="content"><code class="plain">det a b c </code><code class="keyword bold">=</code> <code class="plain">b</code><code class="keyword bold">^</code><code class="value">2</code> <code class="keyword bold">-</code> <code class="value">4</code><code class="keyword bold">*</code><code class="plain">a</code><code class="keyword bold">*</code><code class="plain">c</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="plain">quadsol1 a b c </code><code class="keyword bold">=</code> <code class="plain">(</code><code class="keyword bold">-</code><code class="plain">b </code><code class="keyword bold">-</code> <code class="functions bold">sqrt</code> <code class="plain">(det a b c))</code><code class="keyword bold">/</code><code class="value">2</code><code class="keyword bold">*</code><code class="plain">a</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="plain">quadsol2 a b c </code><code class="keyword bold">=</code> <code class="plain">(</code><code class="keyword bold">-</code><code class="plain">b </code><code class="keyword bold">+</code> <code class="functions bold">sqrt</code> <code class="plain">(det a b c))</code><code class="keyword bold">/</code><code class="value">2</code><code class="keyword bold">*</code><code class="plain">a</code></td></tr></tbody></table></div></div></div></div>
  </li>
  <li>
  <p>Save your <code class="file">exer1.hs</code>.  You can test it in <abbr title="Glasgow Haskell Compiler interactive environment">GHCi</abbr> like this:</p>
  <div class="blockcode"><div id="highlighter_101369" class="syntaxhighlighter nogutter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="content"><code class="plain">Prelude</code><code class="keyword bold">&gt;</code> <code class="keyword bold">:</code><code class="plain">l exer1</code><code class="keyword bold">.</code><code class="plain">hs</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="keyword bold">*</code><code class="plain">Main</code><code class="keyword bold">&gt;</code> <code class="plain">det </code><code class="value">1</code> <code class="value">4</code> <code class="value">2</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="value">8</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="keyword bold">*</code><code class="plain">Main</code><code class="keyword bold">&gt;</code> <code class="plain">quadsol1 </code><code class="value">1</code> <code class="value">4</code> <code class="value">2</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="keyword bold">-</code><code class="value">3.414213562373095</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="keyword bold">*</code><code class="plain">Main</code><code class="keyword bold">&gt;</code> <code class="plain">quadsol2 </code><code class="value">1</code> <code class="value">4</code> <code class="value">2</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="keyword bold">-</code><code class="value">0.5857864376269049</code></td></tr></tbody></table></div></div></div></div>
  </li>
  <li>
  <p>Add to your <code class="file">exer1.hs</code> a function <code class="haskell">square</code> that takes one number as an argument and returns the square that value.  (So, <code class="haskell">square&nbsp;4</code> should return 16.)</p>
  <p>In <abbr title="Glasgow Haskell Compiler interactive environment">GHCi</abbr>, you can reload your <code class="file">exer1.hs</code> and test it like this:</p>
  <div class="blockcode"><div id="highlighter_761244" class="syntaxhighlighter nogutter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="content"><code class="keyword bold">*</code><code class="plain">Main</code><code class="keyword bold">&gt;</code> <code class="keyword bold">:</code><code class="plain">r</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="plain">Ok, modules loaded</code><code class="keyword bold">:</code> <code class="plain">Main</code><code class="keyword bold">.</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="keyword bold">*</code><code class="plain">Main</code><code class="keyword bold">&gt;</code> <code class="plain">square </code><code class="value">8</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="value">64</code></td></tr></tbody></table></div></div></div></div>
  </li>
  <li>
  <p>Add another function to your <code class="file">exer1.hs</code> called <code class="haskell">third</code> that returns the third element of a list.  It should behave like this: (including no need to check for the error if there is no third element)</p>
  <div class="blockcode"><div id="highlighter_76102" class="syntaxhighlighter nogutter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="content"><code class="keyword bold">*</code><code class="plain">Main</code><code class="keyword bold">&gt;</code> <code class="plain">third [</code><code class="value">7</code><code class="plain">,</code><code class="value">8</code><code class="plain">,</code><code class="value">9</code><code class="plain">,</code><code class="value">10</code><code class="plain">,</code><code class="value">11</code><code class="plain">,</code><code class="value">12</code><code class="plain">]</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="value">9</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="keyword bold">*</code><code class="plain">Main</code><code class="keyword bold">&gt;</code> <code class="plain">third [</code><code class="value">1</code><code class="plain">,</code><code class="value">2</code><code class="plain">]</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="keyword bold">***</code> <code class="plain">Exception‚Ä¶</code></td></tr></tbody></table></div></div></div></div>
  <p>[Hint: there is a built-in list indexing operator, or you can use pattern matching to get to the third element.]</p>
  </li>
  <li>
  <p>Finally, in your <code class="file">exer1.hs</code>, write a function <code class="haskell">hailstone&nbsp;n</code> that find the next element in the <a href="http://en.wikipedia.org/wiki/Collatz_conjecture">hailstone sequence</a>.  That is, for even <code class="haskell">n</code>, it should return <code class="haskell">n</code>/2; for odd <code class="haskell">n</code>, it should return 3<code class="haskell">n</code> + 1. (Hint: the Haskell <code class="haskell">div</code> function does integer division; the <code class="haskell">/</code> always returns a Float, which is not what you want.)</p>
  <div class="blockcode"><div id="highlighter_703128" class="syntaxhighlighter nogutter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="content"><code class="keyword bold">&gt;</code> <code class="plain">hailstone </code><code class="value">14</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="value">7</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="keyword bold">&gt;</code> <code class="plain">hailstone </code><code class="value">31</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="value">94</code></td></tr></tbody></table></div></div></div></div>
  </li>
</ol>
<p>Submit your work for this exercise in <a href="https://courses.cs.sfu.ca/2014su-cmpt-383-e1/">CourSys</a>.  [You aren't submitting anything for parts 2 and 4: we'll trust that you have done them.]</p>



</div>
<hr class="footsep">
<p class="footlink">Return to <a href="./">Exercises</a>.</p>
<p class="footcopy"><a href="/~ggbaker/copyright">Copyright</a> ¬© <a href="/~ggbaker/" rel="author">Greg Baker</a>, last modified 2014-05-14.</p>




</body></html>Ytext/htmlUUTF-8P®$).3‘_WebResourceResponse_)https://www.cs.sfu.ca/~ggbaker/js/main.jsOObplist00‘vwX$versionX$objectsY$archiverT$top Ü†Ø'"()012RSTUVWXYZ[\]^_`abcdefghijklopqU$null›	
 !R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1ÄÄÄ Ä$Ä&ÄÄ%Ä”#$%&'WNS.base[NS.relativeÄ ÄÄ_)https://www.cs.sfu.ca/~ggbaker/js/main.js“*+,-Z$classnameX$classesUNSURL¢./UNSURLXNSObject#AπQ ?ßD»”345CQWNS.keysZNS.objects≠6789:;<=>?@ABÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄ≠DEFGHIJKLMNOPÄÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#\Content-TypeZKeep-AliveVServer_Content-Style-TypeWExpiresSbox]Cache-ControlTDate^Content-LengthZConnection]Accept-RangesTEtag]Last-Modified_text/javascript_timeout=2, max=199_oApache/2.0.59 (Unix) mod_fastcgi/2.4.2 proxy_html/3.1.2 SVN/1.4.4 DAV/2 mod_ssl/2.0.59 OpenSSL/0.9.8k PHP/5.2.8Xtext/css_Wed, 18 Jun 2014 12:11:53 GMT_b4 D=165862 t=1403050313636010]max-age=43200_Wed, 18 Jun 2014 00:11:53 GMTS192ZKeep-AliveUbytes_"37930-c0-47bd2a00"_Thu, 02 Jun 2011 23:48:56 GMT“*+mn\NSDictionary¢m/¿_text/javascript“*+rs_NSHTTPURLResponse£tu/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—xy_WebResourceResponseÄ    # - 2 7 a g Ç Ö â å è í ñ ô † £ ¶ © ¨ Ø ± ≥ µ ∑ π ª Ω ø ¡ √ ≈ « Œ ÷ ‚ ‰ Ê Ë$-36<ENPW_jxz|~ÄÇÑÜàäåéêí†¢§¶®™¨Æ∞≤¥∂∏∫º…‘€¯¸
)7<J\q„Ï-;[_jpÜ¶´∏ªΩœ‘ËÏ  #9             z              ;O¿// redirect off the .xhtml URL if sent there somehow
if ( String(window.location).substr(-6,6) == ".xhtml") {
  var s = String(window.location);
  window.location = s.substr(0, s.length-6);
}
_text/javascript‘_$https://www.cs.sfu.ca/~ggbaker/styleO±bplist00‘ÇÉX$versionX$objectsY$archiverT$top Ü†Ø-"()012XYZ[\]^_`abcdefghijklmnopqrstuvwx{|}U$null›	
 !R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1ÄÄÄ Ä*Ä,ÄÄ+Ä”#$%&'WNS.base[NS.relativeÄ ÄÄ_$https://www.cs.sfu.ca/~ggbaker/style“*+,-Z$classnameX$classesUNSURL¢./UNSURLXNSObject#AπQ 8zû»”345FWWNS.keysZNS.objectsØ6789:;<=>?@ABCDEÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄØGHIJKLMNOPQRSTUVÄÄÄÄÄÄÄÄ Ä!Ä"Ä#Ä$Ä%Ä&Ä'Ä(Ä)\Content-TypeZKeep-Alive]Last-ModifiedVServer_Content-Style-TypeWExpiresSboxSTCN]Cache-ControlTDate^Content-LengthZConnection_Content-Location]Accept-RangesTVaryTEtagXtext/css_timeout=2, max=200_Sun, 06 Feb 2011 20:28:19 GMT_oApache/2.0.59 (Unix) mod_fastcgi/2.4.2 proxy_html/3.1.2 SVN/1.4.4 DAV/2 mod_ssl/2.0.59 OpenSSL/0.9.8k PHP/5.2.8Xtext/css_Wed, 18 Jun 2014 12:11:53 GMT_b3 D=109355 t=1403050313660556Vchoice]max-age=43200_Wed, 18 Jun 2014 00:11:53 GMTT6511ZKeep-AliveYstyle.cssUbytesYnegotiate_"cc71b5-196f-f4af9ec0;4423b340"“*+yz\NSDictionary¢y/oXtext/css“*+~_NSHTTPURLResponse£ÄÅ/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—ÑÖ_WebResourceResponseÄ    # - 2 7 g m à ã è í ï ò ú ü ¶ © ¨ Ø ≤ µ ∑ π ª Ω ø ¡ √ ≈ « … À Õ ‘ ‹ Ë Í Ï Ó%.47=FOQX`k~ÄÇÑÜàäåéêíîñòöúû±≥µ∑πªΩø¡√≈«…ÀÕœ—”‡Î˘ !%38GResx}Üõª-6Vw~å¨±º∆Ã÷¯˝
26JXjmÉ             Ü              ÖOo/* General apperance */

body {
  background-image: none;
  background: #FFFFFF;
  color: #000000;
  margin-left: 1em;
  margin-right: 1em;
}
a:link {
  color: #0000ee;
  background-color: transparent;
  background-image: none;
}
a:visited {
  color: #551188;
  background-color: transparent;
  background-image: none;
}
a:active {
  color: #ff0000;
  background-color: transparent;
  background-image: none;
}

h1,h2,h3,h4,h5,h6 { font-family: sans-serif; }
h1 {
  font-weight: bold;
  font-size: x-large;
}
h2 {
  font-size: large;
  font-weight: bold;
}
h3 {
  font-size: large;
  font-weight: normal;
  font-style: italic;
  margin-bottom: 0;
  padding-bottom: 0;
  margin-top: 0;
  padding-top: 0;
}

a.subtle img {
  border-width: 0; 
}

h1 abbr[title], h1 acronym[title] {
  border-bottom-width: 0;
}
h2 abbr[title], h2 acronym[title] {
  border-bottom-width: 0;
}
h3 abbr[title], h3 acronym[title] {
  border-bottom-width: 0;
}
abbr[title].obvious, acronym[title].obvious {
  border-bottom-width: 0;
  font-style: inherit;
}
h3 abbr[title].obvious, h3 acronym[title].obvious {
  font-style: inherit;
}
@media print {
  abbr[title], acronym[title] {
    border-bottom-width: 0;
    font-style: inherit;
  }
}

hr.footsep {
  clear: both;
  display: none;
}
p.footlink {
  border-top: thin solid black;
  margin: 0;
  padding: 0;
  padding-top: .5em;
  font-size: smaller;
  text-align: right;
}
p.footcopy {
  font-size: smaller;
  margin: 0;
  padding: 0;
  padding-top: .5em;
  text-align: right;
}

dd p:first-child {
  margin-top: 0;
  padding-top: 0;
}
ol ol {
  list-style-type: lower-alpha;
}

/* code types */

code {
  font-family: "Courier", monospace;
}
@media print {
  code {
    font-family: sans-serif;
  }
}
.unix {
  color: #050;
  background-color: transparent;
}
.html {
  color: #700;
  background-color: transparent;
}
.xml {
  color: #007;
  background-color: transparent;
}
.file {
  color: #990000;
  background-color: transparent;
}
.c {
  color: #000077;
  background-color: transparent;
}
.out {
  color: #770077;
  background-color: transparent;
}
.in {
  color: #007777;
  background-color: transparent;
}
.data {
  color: #777700;
  background-color: transparent;
}
.config {
  color: #550077;
  background-color: transparent;
}
.python {
  color: #000077;
  background-color: transparent;
}
.sql {
  color: #007;
  background-color: transparent;
}
.ruby {
  color: #a50;
  background-color: transparent;
}
.java {
  color: #a50;
  background-color: transparent;
}
.mathvar {
  font-style: italic;
}
.power {
  vertical-align: super;
}

.aside { /* side notes in code */ 
  font-size: small;
  color: #000000;
  background-color: transparent;
}
var, .var { /* stuff that should be filled in */
  font-style: italic;
  background-color: #EEEEEE;
  color: inherit;
}

/* VHDL special cases */
.vhdl {
  color: #000070;
  background-color: transparent;
 }
a:link code.vhdl {
  color: #0000ee;
  background-color: transparent;
}
a:visited code.vhdl {
  color: #551188;
  background-color: transparent;
}
a:active code.vhdl {
  color: #ff0000;
  background-color: transparent;
}
code.vhdl a:link {
  color: #0000ee;
  background-color: transparent;
}
code.vhdl a:visited {
  color: #551188;
  background-color: transparent;
}
code.vhdl a:active {
  color: #ff0000;
  background-color: transparent;
}
h1 code.vhdl {
  color: #000000;
  background-color: transparent;
}
h2 code.vhdl {
  color: #000000;
  background-color: transparent;
}



/* new classes to suit my whims */
div.figure {
  text-align: center;
}

div.blockcode, div.displaymath {
  display: block;
  margin: 1em 2.5em;
}

ol.subpoints {
  list-style-type: lower-alpha;
}
ol.parts {
  list-style-type: upper-roman;
}
ol.subparts {
  list-style-type: lower-alpha;
}

img.rightfloat {
  float: right;
}
img.leftfloat {
  float: left;
}

strong.num {
  color: #AA00AA;
  background-color: transparent;
}

span.status {
  font-weight: bold;
}

span.sidelink {
  font-size: small;
}

td.common {
  font-size: small;
}

p.lognote {
  font-size: small;
}
p.common {
  margin-left: 3em;
  text-align: right;
}
p.warn {
  color: #C00;
  background-color: transparent;
}

span.goal {
  color: #090;
  background-color: transparent;
}
span.goal a {
  /* text-decoration: none; */
  color: #090;  
  background-color: transparent;
}

table.io, table.io th, table.io td {
  border: thin solid black;
}
table.io th, table.io td {
  padding-left: 1em;
  padding-right: 1em;
}
span.fractop {
  border-bottom: black solid thin;
}

table.bordered {
  border: solid 1px;
  border-color: #bbb #000 #000 #bbb;
}
table.bordered td, table.bordered th {
  border: solid 1px;
  border-color: #000 #bbb #bbb #000;
  padding: 1px 3px;
}

table.figure, table.figure caption {
  margin-left: auto;
  margin-right: auto;
}
table.figure th, table.figure td {
  padding-left: 0.5em;
  padding-right: 0.5em;
}
div.samplerun {
  font-family: monospace;
  margin: .5em 2.5em;
  padding: .5ex;
  border: 1px dotted #777;
}
kbd, dt {
  font-weight: bold;
}
fieldset legend { /* like h3 */
  font-family: sans-serif;
  font-size: large !important;
  font-weight: normal !important;
  font-style: italic;
  padding: 0 0.5em;
  margin-bottom: 0;
  margin-top: 0;
}
img.screenshot {
  border: thin #000 dashed;
  padding: 4px;
}

p.warning {
  font-style: italic;
}

/* schedule table */
table#sched {
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
table#sched caption {
  margin-left: auto;
  margin-right: auto;
}
table#sched td, table#sched th {
  /*padding: 0.1em 0.5em;*/
}
table#sched th {
  background-color: #eee;
}

/* LaTeX logo formatting from http://nitens.org/taraborelli/texlogo  (itself derived from http://edward.oconnor.cx/2007/08/tex-poshlet ) */
.latex {
  /*font-family: Times, "Times New Roman", serif;*/
  letter-spacing: 1px;
}
.latex sup {
  text-transform: uppercase;
  letter-spacing: 1px;
  font-size: 0.85em;
  vertical-align: 0.15em;
  margin-left: -0.36em;
  margin-right: -0.15em;
}
.latex sub {
  text-transform: uppercase;
  vertical-align: -0.5ex;
  margin-left: -0.1667em;
  margin-right: -0.125em;
  font-size: 1em;
}


Xtext/css‘_Ahttps://www.cs.sfu.ca/~ggbaker/js/syntaxhighlighter/src/shCore.jsOkbplist00‘vwX$versionX$objectsY$archiverT$top Ü†Ø'"()012RSTUVWXYZ[\]^_`abcdefghijklopqU$null›	
 !R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1ÄÄÄ Ä$Ä&ÄÄ%Ä”#$%&'WNS.base[NS.relativeÄ ÄÄ_Ahttps://www.cs.sfu.ca/~ggbaker/js/syntaxhighlighter/src/shCore.js“*+,-Z$classnameX$classesUNSURL¢./UNSURLXNSObject#AπQŒŸÉÿ»”345CQWNS.keysZNS.objects≠6789:;<=>?@ABÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄ≠DEFGHIJKLMNOPÄÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#\Content-TypeZKeep-AliveVServer_Content-Style-TypeWExpiresSbox]Cache-ControlTDate^Content-LengthZConnection]Accept-RangesTEtag]Last-Modified_text/javascript_timeout=2, max=198_oApache/2.0.59 (Unix) mod_fastcgi/2.4.2 proxy_html/3.1.2 SVN/1.4.4 DAV/2 mod_ssl/2.0.59 OpenSSL/0.9.8k PHP/5.2.8Xtext/css_Wed, 18 Jun 2014 12:11:58 GMT_b4 D=248681 t=1403050318107646]max-age=43200_Wed, 18 Jun 2014 00:11:58 GMTU62167ZKeep-AliveUbytes_"37a6f-f2d7-1600080"_Wed, 14 Jul 2010 23:04:18 GMT“*+mn\NSDictionary¢m/Ú◊_text/javascript“*+rs_NSHTTPURLResponse£tu/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—xy_WebResourceResponseÄ    # - 2 7 a g Ç Ö â å è í ñ ô † £ ¶ © ¨ Ø ± ≥ µ ∑ π ª Ω ø ¡ √ ≈ « Œ ÷ ‚ ‰ Ê Ë,1<EKNT]fhowÇêíîñòöúû†¢§¶®™∏∫ºæ¿¬ƒ∆» ÃŒ–“‘·ÏÛ"'6AOTbtâ˚$ESsyÑä°¡∆”÷ŸÎ*<?U             z              WOÚ◊/**
 * SyntaxHighlighter
 * http://alexgorbatchev.com/
 *
 * SyntaxHighlighter is donationware. If you are using it, please donate.
 * http://alexgorbatchev.com/wiki/SyntaxHighlighter:Donate
 *
 * @version
 * 2.1.364 (October 15 2009)
 * 
 * @copyright
 * Copyright (C) 2004-2009 Alex Gorbatchev.
 *
 * @license
 * This file is part of SyntaxHighlighter.
 * 
 * SyntaxHighlighter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SyntaxHighlighter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SyntaxHighlighter.  If not, see <http://www.gnu.org/copyleft/lesser.html>.
 */
//
// Begin anonymous function. This is used to contain local scope variables without polutting global scope.
//
if (!window.SyntaxHighlighter) var SyntaxHighlighter = function() { 

// Shortcut object which will be assigned to the SyntaxHighlighter variable.
// This is a shorthand for local reference in order to avoid long namespace 
// references to SyntaxHighlighter.whatever...
var sh = {
	defaults : {
		/** Additional CSS class names to be added to highlighter elements. */
		'class-name' : '',
		
		/** First line number. */
		'first-line' : 1,
		
		/**
		 * Pads line numbers. Possible values are:
		 *
		 *   false - don't pad line numbers.
		 *   true  - automaticaly pad numbers with minimum required number of leading zeroes.
		 *   [int] - length up to which pad line numbers.
		 */
		'pad-line-numbers' : true,
		
		/** Lines to highlight. */
		'highlight' : null,
		
		/** Enables or disables smart tabs. */
		'smart-tabs' : true,
		
		/** Gets or sets tab size. */
		'tab-size' : 4,
		
		/** Enables or disables gutter. */
		'gutter' : true,
		
		/** Enables or disables toolbar. */
		'toolbar' : true,
		
		/** Forces code view to be collapsed. */
		'collapse' : false,
		
		/** Enables or disables automatic links. */
		'auto-links' : true,
		
		/** Gets or sets light mode. Equavalent to turning off gutter and toolbar. */
		'light' : false,
		
		/** Enables or disables automatic line wrapping. */
		'wrap-lines' : true,
		
		'html-script' : false
	},
	
	config : {
		/** Enables use of <SCRIPT type="syntaxhighlighter" /> tags. */
		useScriptTags : true,
		
		/** Path to the copy to clipboard SWF file. */
		clipboardSwf : null,

		/** Width of an item in the toolbar. */
		toolbarItemWidth : 16,

		/** Height of an item in the toolbar. */
		toolbarItemHeight : 16,
		
		/** Blogger mode flag. */
		bloggerMode : false,
		
		stripBrs : false,
		
		/** Name of the tag that SyntaxHighlighter will automatically look for. */
		tagName : 'pre',
		
		strings : {
			expandSource : 'show source',
			viewSource : 'view source',
			copyToClipboard : 'copy to clipboard',
			copyToClipboardConfirmation : 'The code is in your clipboard now',
			print : 'print',
			help : '?',
			alert: 'SyntaxHighlighter\n\n',
			noBrush : 'Can\'t find brush for: ',
			brushNotHtmlScript : 'Brush wasn\'t configured for html-script option: ',
			
			// this is populated by the build script
			aboutDialog : '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>About SyntaxHighlighter</title></head><body style="font-family:Geneva,Arial,Helvetica,sans-serif;background-color:#fff;color:#000;font-size:1em;text-align:center;"><div style="text-align:center;margin-top:3em;"><div style="font-size:xx-large;">SyntaxHighlighter</div><div style="font-size:.75em;margin-bottom:4em;"><div>version 2.1.364 (October 15 2009)</div><div><a href="http://alexgorbatchev.com" target="_blank" style="color:#0099FF;text-decoration:none;">http://alexgorbatchev.com</a></div><div>If you like this script, please <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=2930402" style="color:#0099FF;text-decoration:none;">donate</a> to keep development active!</div></div><div>JavaScript code syntax highlighter.</div><div>Copyright 2004-2009 Alex Gorbatchev.</div></div></body></html>'
		},

		/** If true, output will show HTML produces instead. */
		debug : false
	},
	
	/** Internal 'global' variables. */
	vars : {
		discoveredBrushes : null,
		spaceWidth : null,
		printFrame : null,
		highlighters : {}
	},
	
	/** This object is populated by user included external brush files. */
	brushes : {},

	/** Common regular expressions. */
	regexLib : {
		multiLineCComments			: /\/\*[\s\S]*?\*\//gm,
		singleLineCComments			: /\/\/.*$/gm,
		singleLinePerlComments		: /#.*$/gm,
		doubleQuotedString			: /"([^\\"\n]|\\.)*"/g,
		singleQuotedString			: /'([^\\'\n]|\\.)*'/g,
		multiLineDoubleQuotedString	: /"([^\\"]|\\.)*"/g,
		multiLineSingleQuotedString	: /'([^\\']|\\.)*'/g,
		xmlComments					: /(&lt;|<)!--[\s\S]*?--(&gt;|>)/gm,
		url							: /&lt;\w+:\/\/[\w-.\/?%&=@:;]*&gt;|\w+:\/\/[\w-.\/?%&=@:;]*/g,
		
		/** <?= ?> tags. */
		phpScriptTags 				: { left: /(&lt;|<)\?=?/g, right: /\?(&gt;|>)/g },
		
		/** <%= %> tags. */
		aspScriptTags				: { left: /(&lt;|<)%=?/g, right: /%(&gt;|>)/g },
		
		/** <script></script> tags. */
		scriptScriptTags			: { left: /(&lt;|<)\s*script.*?(&gt;|>)/gi, right: /(&lt;|<)\/\s*script\s*(&gt;|>)/gi }
	},

	toolbar : {
		/**
		 * Creates new toolbar for a highlighter.
		 * @param {Highlighter} highlighter    Target highlighter.
		 */
		create : function(highlighter)
		{
			var div = document.createElement('DIV'),
				items = sh.toolbar.items
				;
			
			div.className = 'toolbar';
			
			for (var name in items) 
			{
				var constructor = items[name],
					command = new constructor(highlighter),
					element = command.create()
					;
				
				highlighter.toolbarCommands[name] = command;
				
				if (element == null)
					continue;
					
				if (typeof(element) == 'string')
					element = sh.toolbar.createButton(element, highlighter.id, name);
				
				element.className += 'item ' + name;
				div.appendChild(element);
			}
			
			return div;
		},
		
		/**
		 * Create a standard anchor button for the toolbar.
		 * @param {String} label			Label text to display.
		 * @param {String} highlighterId	Highlighter ID that this button would belong to.
		 * @param {String} commandName		Command name that would be executed.
		 * @return {Element}				Returns an 'A' element.
		 */
		createButton : function(label, highlighterId, commandName)
		{
			var a = document.createElement('a'),
				style = a.style,
				config = sh.config,
				width = config.toolbarItemWidth,
				height = config.toolbarItemHeight
				;
			
			a.href = '#' + commandName;
			a.title = label;
			a.highlighterId = highlighterId;
			a.commandName = commandName;
			a.innerHTML = label;
			
			if (isNaN(width) == false)
				style.width = width + 'px';

			if (isNaN(height) == false)
				style.height = height + 'px';
			
			a.onclick = function(e)
			{
				try
				{
					sh.toolbar.executeCommand(
						this, 
						e || window.event,
						this.highlighterId, 
						this.commandName
					);
				}
				catch(e)
				{
					sh.utils.alert(e.message);
				}
				
				return false;
			};
			
			return a;
		},
		
		/**
		 * Executes a toolbar command.
		 * @param {Element}		sender  		Sender element.
		 * @param {MouseEvent}	event			Original mouse event object.
		 * @param {String}		highlighterId	Highlighter DIV element ID.
		 * @param {String}		commandName		Name of the command to execute.
		 * @return {Object} Passes out return value from command execution.
		 */
		executeCommand : function(sender, event, highlighterId, commandName, args)
		{
			var highlighter = sh.vars.highlighters[highlighterId], 
				command
				;

			if (highlighter == null || (command = highlighter.toolbarCommands[commandName]) == null) 
				return null;

			return command.execute(sender, event, args);
		},
		
		/** Collection of toolbar items. */
		items : {
			expandSource : function(highlighter)
			{
				this.create = function()
				{
					if (highlighter.getParam('collapse') != true)
						return;
					
					return sh.config.strings.expandSource;
				};
			
				this.execute = function(sender, event, args)
				{
					var div = highlighter.div;
					
					sender.parentNode.removeChild(sender);
					div.className = div.className.replace('collapsed', '');
				};
			},
		
			/** 
			 * Command to open a new window and display the original unformatted source code inside.
			 */
			viewSource : function(highlighter)
			{
				this.create = function()
				{
					return sh.config.strings.viewSource;
				};
				
				this.execute = function(sender, event, args)
				{
					var code = sh.utils.fixInputString(highlighter.originalCode).replace(/</g, '&lt;'),
						wnd = sh.utils.popup('', '_blank', 750, 400, 'location=0, resizable=1, menubar=0, scrollbars=1')
						;
					
					code = sh.utils.unindent(code);
					
					wnd.document.write('<pre>' + code + '</pre>');
					wnd.document.close();
				};
			},
			
			/**
			 * Command to copy the original source code in to the clipboard.
			 * Uses Flash method if <code>clipboardSwf</code> is configured.
			 */
			copyToClipboard : function(highlighter)
			{
				var flashDiv, flashSwf,
					highlighterId = highlighter.id
					;
				
				this.create = function()
				{
					var config = sh.config;
					
					// disable functionality if running locally
					if (config.clipboardSwf == null)
						return null;

					function params(list)
					{
						var result = '';
						
						for (var name in list)
							result += "<param name='" + name + "' value='" + list[name] + "'/>";
							
						return result;
					};
					
					function attributes(list)
					{
						var result = '';
						
						for (var name in list)
							result += " " + name + "='" + list[name] + "'";
							
						return result;
					};
					
					var args1 = {
							width				: config.toolbarItemWidth,
							height				: config.toolbarItemHeight,
							id					: highlighterId + '_clipboard',
							type				: 'application/x-shockwave-flash',
							title				: sh.config.strings.copyToClipboard
						},
						
						// these arguments are used in IE's <param /> collection
						args2 = {
							allowScriptAccess	: 'always',
							wmode				: 'transparent',
							flashVars			: 'highlighterId=' + highlighterId,
							menu				: 'false'
						},
						swf = config.clipboardSwf,
						html
					;

					if (/msie/i.test(navigator.userAgent))
					{
						html = '<object'
							+ attributes({
								classid : 'clsid:d27cdb6e-ae6d-11cf-96b8-444553540000',
								codebase : 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0'
							})
							+ attributes(args1)
							+ '>'
							+ params(args2)
							+ params({ movie : swf })
							+ '</object>'
						;
					}
					else
					{
						html = '<embed'
							+ attributes(args1)
							+ attributes(args2)
							+ attributes({ src : swf })
							+ '/>'
						;
					}

					flashDiv = document.createElement('div');
					flashDiv.innerHTML = html;
					
					return flashDiv;
				};
				
				this.execute = function(sender, event, args)
				{
					var command = args.command;

					switch (command)
					{
						case 'get':
							var code = sh.utils.unindent(
								sh.utils.fixInputString(highlighter.originalCode)
									.replace(/&lt;/g, '<')
									.replace(/&gt;/g, '>')
									.replace(/&amp;/g, '&')
								);

							if(window.clipboardData)
								// will fall through to the confirmation because there isn't a break
								window.clipboardData.setData('text', code);
							else
								return sh.utils.unindent(code);
							
						case 'ok':
							sh.utils.alert(sh.config.strings.copyToClipboardConfirmation);
							break;
							
						case 'error':
							sh.utils.alert(args.message);
							break;
					}
				};
			},
			
			/** Command to print the colored source code. */
			printSource : function(highlighter)
			{
				this.create = function()
				{
					return sh.config.strings.print;
				};
				
				this.execute = function(sender, event, args)
				{
					var iframe = document.createElement('IFRAME'),
						doc = null
						;
					
					// make sure there is never more than one hidden iframe created by SH
					if (sh.vars.printFrame != null)
						document.body.removeChild(sh.vars.printFrame);
					
					sh.vars.printFrame = iframe;
					
					// this hides the iframe
					iframe.style.cssText = 'position:absolute;width:0px;height:0px;left:-500px;top:-500px;';
				
					document.body.appendChild(iframe);
					doc = iframe.contentWindow.document;
					
					copyStyles(doc, window.document);
					doc.write('<div class="' + highlighter.div.className.replace('collapsed', '') + ' printing">' + highlighter.div.innerHTML + '</div>');
					doc.close();
					
					iframe.contentWindow.focus();
					iframe.contentWindow.print();
					
					function copyStyles(destDoc, sourceDoc)
					{
						var links = sourceDoc.getElementsByTagName('link');
					
						for(var i = 0; i < links.length; i++)
							if(links[i].rel.toLowerCase() == 'stylesheet' && /shCore\.css$/.test(links[i].href))
								destDoc.write('<link type="text/css" rel="stylesheet" href="' + links[i].href + '"></link>');
					};
				};
			},

			/** Command to display the about dialog window. */
			about : function(highlighter)
			{
				this.create = function()
				{	
					return sh.config.strings.help;
				};

				this.execute = function(sender, event)
				{	
					var wnd = sh.utils.popup('', '_blank', 500, 250, 'scrollbars=0'),
						doc = wnd.document
						;
					
					doc.write(sh.config.strings.aboutDialog);
					doc.close();
					wnd.focus();
				};
			}
		}
	},

	utils : {
		/**
		 * Finds an index of element in the array.
		 * @ignore
		 * @param {Object} searchElement
		 * @param {Number} fromIndex
		 * @return {Number} Returns index of element if found; -1 otherwise.
		 */
		indexOf : function(array, searchElement, fromIndex)
		{
			fromIndex = Math.max(fromIndex || 0, 0);

			for (var i = fromIndex; i < array.length; i++)
				if(array[i] == searchElement)
					return i;

			return -1;
		},
		
		/**
		 * Generates a unique element ID.
		 */
		guid : function(prefix)
		{
			return prefix + Math.round(Math.random() * 1000000).toString();
		},
		
		/**
		 * Merges two objects. Values from obj2 override values in obj1.
		 * Function is NOT recursive and works only for one dimensional objects.
		 * @param {Object} obj1 First object.
		 * @param {Object} obj2 Second object.
		 * @return {Object} Returns combination of both objects.
		 */
		merge: function(obj1, obj2)
		{
			var result = {}, name;

			for (name in obj1) 
				result[name] = obj1[name];
			
			for (name in obj2) 
				result[name] = obj2[name];
				
			return result;
		},
		
		/**
		 * Attempts to convert string to boolean.
		 * @param {String} value Input string.
		 * @return {Boolean} Returns true if input was "true", false if input was "false" and value otherwise.
		 */
		toBoolean: function(value)
		{
			switch (value)
			{
				case "true":
					return true;
					
				case "false":
					return false;
			}
			
			return value;
		},
		
		/**
		 * Opens up a centered popup window.
		 * @param {String} url		URL to open in the window.
		 * @param {String} name		Popup name.
		 * @param {int} width		Popup width.
		 * @param {int} height		Popup height.
		 * @param {String} options	window.open() options.
		 * @return {Window}			Returns window instance.
		 */
		popup: function(url, name, width, height, options)
		{
			var x = (screen.width - width) / 2,
				y = (screen.height - height) / 2
				;
				
			options +=	', left=' + x + 
						', top=' + y +
						', width=' + width +
						', height=' + height
				;
			options = options.replace(/^,/, '');

			var win = window.open(url, name, options);
			win.focus();
			return win;
		},
		
		/**
		 * Adds event handler to the target object.
		 * @param {Object} obj		Target object.
		 * @param {String} type		Name of the event.
		 * @param {Function} func	Handling function.
		 */
		addEvent: function(obj, type, func)
		{
			if (obj.attachEvent) 
			{
				obj['e' + type + func] = func;
				obj[type + func] = function()
				{
					obj['e' + type + func](window.event);
				}
				obj.attachEvent('on' + type, obj[type + func]);
			}
			else 
			{
				obj.addEventListener(type, func, false);
			}
		},
		
		/**
		 * Displays an alert.
		 * @param {String} str String to display.
		 */
		alert: function(str)
		{
			alert(sh.config.strings.alert + str)
		},
		
		/**
		 * Finds a brush by its alias.
		 *
		 * @param {String} alias	Brush alias.
		 * @param {Boolean} alert	Suppresses the alert if false.
		 * @return {Brush}			Returns bursh constructor if found, null otherwise.
		 */
		findBrush: function(alias, alert)
		{
			var brushes = sh.vars.discoveredBrushes,
				result = null
				;
			
			if (brushes == null) 
			{
				brushes = {};
				
				// Find all brushes
				for (var brush in sh.brushes) 
				{
					var aliases = sh.brushes[brush].aliases;
					
					if (aliases == null) 
						continue;
					
					// keep the brush name
					sh.brushes[brush].name = brush.toLowerCase();
					
					for (var i = 0; i < aliases.length; i++) 
						brushes[aliases[i]] = brush;
				}
				
				sh.vars.discoveredBrushes = brushes;
			}
			
			result = sh.brushes[brushes[alias]];

			if (result == null && alert != false)
				sh.utils.alert(sh.config.strings.noBrush + alias);
			
			return result;
		},
		
		/**
		 * Executes a callback on each line and replaces each line with result from the callback.
		 * @param {Object} str			Input string.
		 * @param {Object} callback		Callback function taking one string argument and returning a string.
		 */
		eachLine: function(str, callback)
		{
			var lines = str.split('\n');
			
			for (var i = 0; i < lines.length; i++)
				lines[i] = callback(lines[i]);
				
			return lines.join('\n');
		},
		
		/**
		 * This is a special trim which only removes first and last empty lines
		 * and doesn't affect valid leading space on the first line.
		 * 
		 * @param {String} str   Input string
		 * @return {String}      Returns string without empty first and last lines.
		 */
		trimFirstAndLastLines: function(str)
		{
			return str.replace(/^[ ]*[\n]+|[\n]*[ ]*$/g, '');
		},
		
		/**
		 * Parses key/value pairs into hash object.
		 * 
		 * Understands the following formats:
		 * - name: word;
		 * - name: [word, word];
		 * - name: "string";
		 * - name: 'string';
		 * 
		 * For example:
		 *   name1: value; name2: [value, value]; name3: 'value'
		 *   
		 * @param {String} str    Input string.
		 * @return {Object}       Returns deserialized object.
		 */
		parseParams: function(str)
		{
			var match, 
				result = {},
				arrayRegex = new XRegExp("^\\[(?<values>(.*?))\\]$"),
				regex = new XRegExp(
					"(?<name>[\\w-]+)" +
					"\\s*:\\s*" +
					"(?<value>" +
						"[\\w-%#]+|" +		// word
						"\\[.*?\\]|" +		// [] array
						'".*?"|' +			// "" string
						"'.*?'" +			// '' string
					")\\s*;?",
					"g"
				)
				;

			while ((match = regex.exec(str)) != null) 
			{
				var value = match.value
					.replace(/^['"]|['"]$/g, '') // strip quotes from end of strings
					;
				
				// try to parse array value
				if (value != null && arrayRegex.test(value))
				{
					var m = arrayRegex.exec(value);
					value = m.values.length > 0 ? m.values.split(/\s*,\s*/) : [];
				}
				
				result[match.name] = value;
			}
			
			return result;
		},
	
		/**
		 * Wraps each line of the string into <code/> tag with given style applied to it.
		 * 
		 * @param {String} str   Input string.
		 * @param {String} css   Style name to apply to the string.
		 * @return {String}      Returns input string with each line surrounded by <span/> tag.
		 */
		decorate: function(str, css)
		{
			if (str == null || str.length == 0 || str == '\n') 
				return str;
	
			str = str.replace(/</g, '&lt;');
	
			// Replace two or more sequential spaces with &nbsp; leaving last space untouched.
			str = str.replace(/ {2,}/g, function(m)
			{
				var spaces = '';
				
				for (var i = 0; i < m.length - 1; i++)
					spaces += '&nbsp;';
				
				return spaces + ' ';
			});

			// Split each line and apply <span class="...">...</span> to them so that
			// leading spaces aren't included.
			if (css != null) 
				str = sh.utils.eachLine(str, function(line)
				{
					if (line.length == 0) 
						return '';
					
					var spaces = '';
					
					line = line.replace(/^(&nbsp;| )+/, function(s)
					{
						spaces = s;
						return '';
					});
					
					if (line.length == 0) 
						return spaces;
					
					return spaces + '<code class="' + css + '">' + line + '</code>';
				});

			return str;
		},
	
		/**
		 * Pads number with zeros until it's length is the same as given length.
		 * 
		 * @param {Number} number	Number to pad.
		 * @param {Number} length	Max string length with.
		 * @return {String}			Returns a string padded with proper amount of '0'.
		 */
		padNumber : function(number, length)
		{
			var result = number.toString();
			
			while (result.length < length)
				result = '0' + result;
			
			return result;
		},
		
		/**
		 * Measures width of a single space character.
		 * @return {Number} Returns width of a single space character.
		 */
		measureSpace : function()
		{
			var container = document.createElement('div'),
				span,
				result = 0,
				body = document.body,
				id = sh.utils.guid('measureSpace'),
				
				// variable names will be compressed, so it's better than a plain string
				divOpen = '<div class="',
				closeDiv = '</div>',
				closeSpan = '</span>'
				;

			// we have to duplicate highlighter nested structure in order to get an acurate space measurment
			container.innerHTML = 
				divOpen + 'syntaxhighlighter">' 
					+ divOpen + 'lines">' 
						+ divOpen + 'line">' 
							+ divOpen + 'content'
								+ '"><span class="block"><span id="' + id + '">&nbsp;' + closeSpan + closeSpan
							+ closeDiv 
						+ closeDiv 
					+ closeDiv 
				+ closeDiv
				;
			
			body.appendChild(container);
			span = document.getElementById(id);
			
			if (/opera/i.test(navigator.userAgent))
			{
				var style = window.getComputedStyle(span, null);
				result = parseInt(style.getPropertyValue("width"));
			}
			else
			{
				result = span.offsetWidth;
			}

			body.removeChild(container);

			return result;
		},
		
		/**
		 * Replaces tabs with spaces.
		 * 
		 * @param {String} code		Source code.
		 * @param {Number} tabSize	Size of the tab.
		 * @return {String}			Returns code with all tabs replaces by spaces.
		 */
		processTabs : function(code, tabSize)
		{
			var tab = '';
			
			for (var i = 0; i < tabSize; i++)
				tab += ' ';

			return code.replace(/\t/g, tab);
		},
		
		/**
		 * Replaces tabs with smart spaces.
		 * 
		 * @param {String} code    Code to fix the tabs in.
		 * @param {Number} tabSize Number of spaces in a column.
		 * @return {String}        Returns code with all tabs replaces with roper amount of spaces.
		 */
		processSmartTabs : function(code, tabSize)
		{
			var lines = code.split('\n'),
				tab = '\t',
				spaces = ''
				;
			
			// Create a string with 1000 spaces to copy spaces from... 
			// It's assumed that there would be no indentation longer than that.
			for (var i = 0; i < 50; i++) 
				spaces += '                    '; // 20 spaces * 50
					
			// This function inserts specified amount of spaces in the string
			// where a tab is while removing that given tab.
			function insertSpaces(line, pos, count)
			{
				return line.substr(0, pos)
					+ spaces.substr(0, count)
					+ line.substr(pos + 1, line.length) // pos + 1 will get rid of the tab
					;
			};
	
			// Go through all the lines and do the 'smart tabs' magic.
			code = sh.utils.eachLine(code, function(line)
			{
				if (line.indexOf(tab) == -1) 
					return line;
				
				var pos = 0;
				
				while ((pos = line.indexOf(tab)) != -1) 
				{
					// This is pretty much all there is to the 'smart tabs' logic.
					// Based on the position within the line and size of a tab,
					// calculate the amount of spaces we need to insert.
					var spaces = tabSize - pos % tabSize;
					line = insertSpaces(line, pos, spaces);
				}
				
				return line;
			});
			
			return code;
		},
		
		/**
		 * Performs various string fixes based on configuration.
		 */
		fixInputString : function(str)
		{
			var br = /<br\s*\/?>|&lt;br\s*\/?&gt;/gi;
			
			if (sh.config.bloggerMode == true)
				str = str.replace(br, '\n');

			if (sh.config.stripBrs == true)
				str = str.replace(br, '');
				
			return str;
		},
		
		/**
		 * Removes all white space at the begining and end of a string.
		 * 
		 * @param {String} str   String to trim.
		 * @return {String}      Returns string without leading and following white space characters.
		 */
		trim: function(str)
		{
			return str.replace(/^\s+|\s+$/g, '');
		},
		
		/**
		 * Unindents a block of text by the lowest common indent amount.
		 * @param {String} str   Text to unindent.
		 * @return {String}      Returns unindented text block.
		 */
		unindent: function(str)
		{
			var lines = sh.utils.fixInputString(str).split('\n'),
				indents = new Array(),
				regex = /^\s*/,
				min = 1000
				;
			
			// go through every line and check for common number of indents
			for (var i = 0; i < lines.length && min > 0; i++) 
			{
				var line = lines[i];
				
				if (sh.utils.trim(line).length == 0) 
					continue;
				
				var matches = regex.exec(line);
				
				// In the event that just one line doesn't have leading white space
				// we can't unindent anything, so bail completely.
				if (matches == null) 
					return str;
					
				min = Math.min(matches[0].length, min);
			}
			
			// trim minimum common number of white space from the begining of every line
			if (min > 0) 
				for (var i = 0; i < lines.length; i++) 
					lines[i] = lines[i].substr(min);
			
			return lines.join('\n');
		},
	
		/**
		 * Callback method for Array.sort() which sorts matches by
		 * index position and then by length.
		 * 
		 * @param {Match} m1	Left object.
		 * @param {Match} m2    Right object.
		 * @return {Number}     Returns -1, 0 or -1 as a comparison result.
		 */
		matchesSortCallback: function(m1, m2)
		{
			// sort matches by index first
			if(m1.index < m2.index)
				return -1;
			else if(m1.index > m2.index)
				return 1;
			else
			{
				// if index is the same, sort by length
				if(m1.length < m2.length)
					return -1;
				else if(m1.length > m2.length)
					return 1;
			}
			
			return 0;
		},
	
		/**
		 * Executes given regular expression on provided code and returns all
		 * matches that are found.
		 * 
		 * @param {String} code    Code to execute regular expression on.
		 * @param {Object} regex   Regular expression item info from <code>regexList</code> collection.
		 * @return {Array}         Returns a list of Match objects.
		 */ 
		getMatches: function(code, regexInfo)
		{
			function defaultAdd(match, regexInfo)
			{
				return [new sh.Match(match[0], match.index, regexInfo.css)];
			};
			
			var index = 0,
				match = null,
				result = [],
				func = regexInfo.func ? regexInfo.func : defaultAdd
				;
			
			while((match = regexInfo.regex.exec(code)) != null)
				result = result.concat(func(match, regexInfo));
				
			return result;
		},
		
		processUrls: function(code)
		{
			var lt = '&lt;',
				gt = '&gt;'
				;
			
			return code.replace(sh.regexLib.url, function(m)
			{
				var suffix = '', prefix = '';
				
				// We include &lt; and &gt; in the URL for the common cases like <http://google.com>
				// The problem is that they get transformed into &lt;http://google.com&gt;
				// Where as &gt; easily looks like part of the URL string.
				
				if (m.indexOf(lt) == 0)
				{
					prefix = lt;
					m = m.substring(lt.length);
				}

				if (m.indexOf(gt) == m.length - gt.length)
				{
					m = m.substring(0, m.length - gt.length);
					suffix = gt;
				}
				
				return prefix + '<a href="' + m + '">' + m + '</a>' + suffix;
			});
		},
		
		/**
		 * Finds all <SCRIPT TYPE="syntaxhighlighter" /> elements.
		 * @return {Array} Returns array of all found SyntaxHighlighter tags.
		 */
		getSyntaxHighlighterScriptTags: function()
		{
			var tags = document.getElementsByTagName('script'),
				result = []
				;
			
			for (var i = 0; i < tags.length; i++)
				if (tags[i].type == 'syntaxhighlighter')
					result.push(tags[i]);
					
			return result;
		},
		
		/**
		 * Strips <![CDATA[]]> from <SCRIPT /> content because it should be used
		 * there in most cases for XHTML compliance.
		 * @param {String} original	Input code.
		 * @return {String} Returns code without leading <![CDATA[]]> tags.
		 */
		stripCData: function(original)
		{
			var left = '<![CDATA[',
				right = ']]>',
				// for some reason IE inserts some leading blanks here
				copy = sh.utils.trim(original),
				changed = false
				;
			
			if (copy.indexOf(left) == 0)
			{
				copy = copy.substring(left.length);
				changed = true;
			}
			
			if (copy.indexOf(right) == copy.length - right.length)
			{
				copy = copy.substring(0, copy.length - right.length);
				changed = true;
			}
			
			return changed ? copy : original;
		}
	}, // end of utils
	
	/**
	 * Shorthand to highlight all elements on the page that are marked as 
	 * SyntaxHighlighter source code.
	 * 
	 * @param {Object} globalParams		Optional parameters which override element's 
	 * 									parameters. Only used if element is specified.
	 * 
	 * @param {Object} element	Optional element to highlight. If none is
	 * 							provided, all elements in the current document 
	 * 							are highlighted.
	 */ 
	highlight : function(globalParams, element)
	{
		function toArray(source)
		{
			var result = [];
			
			for (var i = 0; i < source.length; i++) 
				result.push(source[i]);
				
			return result;
		};
		
		var elements = element ? [element] : toArray(document.getElementsByTagName(sh.config.tagName)), 
			propertyName = 'innerHTML', 
			highlighter = null,
			conf = sh.config
			;

		// support for <SCRIPT TYPE="syntaxhighlighter" /> feature
		if (conf.useScriptTags)
			elements = elements.concat(sh.utils.getSyntaxHighlighterScriptTags());

		if (elements.length === 0) 
			return;
	
		for (var i = 0; i < elements.length; i++) 
		{
			var target = elements[i], 
				params = sh.utils.parseParams(target.className),
				brushName,
				code,
				result
				;

			// local params take precedence over globals
			params = sh.utils.merge(globalParams, params);
			brushName = params['brush'];

			if (brushName == null)
				continue;

			// Instantiate a brush
			if (params['html-script'] == 'true' || sh.defaults['html-script'] == true) 
			{
				highlighter = new sh.HtmlScript(brushName);
				brushName = 'htmlscript';
			}
			else
			{
				var brush = sh.utils.findBrush(brushName);
				
				if (brush)
				{
					brushName = brush.name;
					highlighter = new brush();
				}
				else
				{
					continue;
				}
			}
			
			code = target[propertyName];
			
			// remove CDATA from <SCRIPT/> tags if it's present
			if (conf.useScriptTags)
				code = sh.utils.stripCData(code);
			
			params['brush-name'] = brushName;
			highlighter.highlight(code, params);
			
			result = highlighter.div;
			
			if (sh.config.debug) 
			{
				result = document.createElement('textarea');
				result.value = highlighter.div.innerHTML;
				result.style.width = '70em';
				result.style.height = '30em';
			}
			
			target.parentNode.replaceChild(result, target);
		}
	},

	/**
	 * Main entry point for the SyntaxHighlighter.
	 * @param {Object} params Optional params to apply to all highlighted elements.
	 */
	all : function(params)
	{
		sh.utils.addEvent(
			window,
			'load',
			function() { sh.highlight(params); }
		);
	}
}; // end of sh

/**
 * Match object.
 */
sh.Match = function(value, index, css)
{
	this.value = value;
	this.index = index;
	this.length = value.length;
	this.css = css;
	this.brushName = null;
};

sh.Match.prototype.toString = function()
{
	return this.value;
};

/**
 * Simulates HTML code with a scripting language embedded.
 * 
 * @param {String} scriptBrushName Brush name of the scripting language.
 */
sh.HtmlScript = function(scriptBrushName)
{
	var brushClass = sh.utils.findBrush(scriptBrushName),
		scriptBrush,
		xmlBrush = new sh.brushes.Xml(),
		bracketsRegex = null
		;

	if (brushClass == null)
		return;
	
	scriptBrush = new brushClass();
	this.xmlBrush = xmlBrush;
	
	if (scriptBrush.htmlScript == null)
	{
		sh.utils.alert(sh.config.strings.brushNotHtmlScript + scriptBrushName);
		return;
	}
	
	xmlBrush.regexList.push(
		{ regex: scriptBrush.htmlScript.code, func: process }
	);
	
	function offsetMatches(matches, offset)
	{
		for (var j = 0; j < matches.length; j++) 
			matches[j].index += offset;
	}
	
	function process(match, info)
	{
		var code = match.code,
			matches = [],
			regexList = scriptBrush.regexList,
			offset = match.index + match.left.length,
			htmlScript = scriptBrush.htmlScript,
			result
			;

		// add all matches from the code
		for (var i = 0; i < regexList.length; i++)
		{
			result = sh.utils.getMatches(code, regexList[i]);
			offsetMatches(result, offset);
			matches = matches.concat(result);
		}
		
		// add left script bracket
		if (htmlScript.left != null && match.left != null)
		{
			result = sh.utils.getMatches(match.left, htmlScript.left);
			offsetMatches(result, match.index);
			matches = matches.concat(result);
		}
		
		// add right script bracket
		if (htmlScript.right != null && match.right != null)
		{
			result = sh.utils.getMatches(match.right, htmlScript.right);
			offsetMatches(result, match.index + match[0].lastIndexOf(match.right));
			matches = matches.concat(result);
		}
		
		for (var j = 0; j < matches.length; j++)
			matches[j].brushName = brushClass.name;

		return matches;
	}
};

sh.HtmlScript.prototype.highlight = function(code, params)
{
	this.xmlBrush.highlight(code, params);
	this.div = this.xmlBrush.div;
}

/**
 * Main Highlither class.
 * @constructor
 */
sh.Highlighter = function()
{
};

sh.Highlighter.prototype = {
	/**
	 * Returns value of the parameter passed to the highlighter.
	 * @param {String} name				Name of the parameter.
	 * @param {Object} defaultValue		Default value.
	 * @return {Object}					Returns found value or default value otherwise.
	 */
	getParam : function(name, defaultValue)
	{
		var result = this.params[name];
		return sh.utils.toBoolean(result == null ? defaultValue : result);
	},
	
	/**
	 * Shortcut to document.createElement().
	 * @param {String} name		Name of the element to create (DIV, A, etc).
	 * @return {HTMLElement}	Returns new HTML element.
	 */
	create: function(name)
	{
		return document.createElement(name);
	},
	
	/**
	 * Applies all regular expression to the code and stores all found
	 * matches in the `this.matches` array.
	 * @param {Array} regexList		List of regular expressions.
	 * @param {String} code			Source code.
	 * @return {Array}				Returns list of matches.
	 */
	findMatches: function(regexList, code)
	{
		var result = [];
		
		if (regexList != null)
			for (var i = 0; i < regexList.length; i++) 
				// BUG: length returns len+1 for array if methods added to prototype chain (oising@gmail.com)
				if (typeof (regexList[i]) == "object")
					result = result.concat(sh.utils.getMatches(code, regexList[i]));
		
		// sort the matches
		return result.sort(sh.utils.matchesSortCallback);
	},
	
	/**
	 * Checks to see if any of the matches are inside of other matches. 
	 * This process would get rid of highligted strings inside comments, 
	 * keywords inside strings and so on.
	 */
	removeNestedMatches: function()
	{
		var matches = this.matches;
		
		// Optimized by Jose Prado (http://joseprado.com)
		for (var i = 0; i < matches.length; i++) 
		{ 
			if (matches[i] === null)
				continue;
			
			var itemI = matches[i],
				itemIEndPos = itemI.index + itemI.length
				;
			
			for (var j = i + 1; j < matches.length && matches[i] !== null; j++) 
			{
				var itemJ = matches[j];
				
				if (itemJ === null) 
					continue;
				else if (itemJ.index > itemIEndPos) 
					break;
				else if (itemJ.index == itemI.index && itemJ.length > itemI.length)
					this.matches[i] = null;
				else if (itemJ.index >= itemI.index && itemJ.index < itemIEndPos) 
					this.matches[j] = null;
			}
		}
	},
	
	/**
	 * Splits block of text into individual DIV lines.
	 * @param {String} code     Code to highlight.
	 * @return {String}         Returns highlighted code in HTML form.
	 */
	createDisplayLines : function(code)
	{
		var lines = code.split(/\n/g),
			firstLine = parseInt(this.getParam('first-line')),
			padLength = this.getParam('pad-line-numbers'),
			highlightedLines = this.getParam('highlight', []),
			hasGutter = this.getParam('gutter')
			;
		
		code = '';
		
		if (padLength == true)
			padLength = (firstLine + lines.length - 1).toString().length;
		else if (isNaN(padLength) == true)
			padLength = 0;

		for (var i = 0; i < lines.length; i++)
		{
			var line = lines[i],
				indent = /^(&nbsp;|\s)+/.exec(line),
				lineClass = 'alt' + (i % 2 == 0 ? 1 : 2),
				lineNumber = sh.utils.padNumber(firstLine + i, padLength),
				highlighted = sh.utils.indexOf(highlightedLines, (firstLine + i).toString()) != -1,
				spaces = null
				;

			if (indent != null)
			{
				spaces = indent[0].toString();
				line = line.substr(spaces.length);
			}

			line = sh.utils.trim(line);
			
			if (line.length == 0)
				line = '&nbsp;';
			
			if (highlighted)
				lineClass += ' highlighted';
			
			code += 
				'<div class="line ' + lineClass + '">'
					+ '<table>'
						+ '<tr>'
							+ (hasGutter ? '<td class="number"><code>' + lineNumber + '</code></td>' : '')
							+ '<td class="content">'
								+ (spaces != null ? '<code class="spaces">' + spaces.replace(' ', '&nbsp;') + '</code>' : '')
								+ line
							+ '</td>'
						+ '</tr>'
					+ '</table>'
				+ '</div>'
				;
		}
		
		return code;
	},
	
	/**
	 * Finds all matches in the source code.
	 * @param {String} code		Source code to process matches in.
	 * @param {Array} matches	Discovered regex matches.
	 * @return {String} Returns formatted HTML with processed mathes.
	 */
	processMatches: function(code, matches)
	{
		var pos = 0, 
			result = '',
			decorate = sh.utils.decorate, // make an alias to save some bytes
			brushName = this.getParam('brush-name', '')
			;
		
		function getBrushNameCss(match)
		{
			var result = match ? (match.brushName || brushName) : brushName;
			return result ? result + ' ' : '';
		};
		
		// Finally, go through the final list of matches and pull the all
		// together adding everything in between that isn't a match.
		for (var i = 0; i < matches.length; i++) 
		{
			var match = matches[i],
				matchBrushName
				;
			
			if (match === null || match.length === 0) 
				continue;
			
			matchBrushName = getBrushNameCss(match);
			
			result += decorate(code.substr(pos, match.index - pos), matchBrushName + 'plain')
					+ decorate(match.value, matchBrushName + match.css)
					;

			pos = match.index + match.length;
		}

		// don't forget to add whatever's remaining in the string
		result += decorate(code.substr(pos), getBrushNameCss() + 'plain');

		return result;
	},
	
	/**
	 * Highlights the code and returns complete HTML.
	 * @param {String} code     Code to highlight.
	 * @param {Object} params   Parameters object.
	 */
	highlight: function(code, params)
	{
		// using variables for shortcuts because JS compressor will shorten local variable names
		var conf = sh.config,
			vars = sh.vars,
			div,
			divClassName,
			tabSize,
			important = 'important'
			;

		this.params = {};
		this.div = null;
		this.lines = null;
		this.code = null;
		this.bar = null;
		this.toolbarCommands = {};
		this.id = sh.utils.guid('highlighter_');

		// register this instance in the highlighters list
		vars.highlighters[this.id] = this;

		if (code === null) 
			code = '';
		
		// local params take precedence over defaults
		this.params = sh.utils.merge(sh.defaults, params || {});

		// process light mode
		if (this.getParam('light') == true)
			this.params.toolbar = this.params.gutter = false;
		
		this.div = div = this.create('DIV');
		this.lines = this.create('DIV');
		this.lines.className = 'lines';

		className = 'syntaxhighlighter';
		div.id = this.id;
		
		// make collapsed
		if (this.getParam('collapse'))
			className += ' collapsed';
		
		// disable gutter
		if (this.getParam('gutter') == false)
			className += ' nogutter';
		
		// disable line wrapping
		if (this.getParam('wrap-lines') == false)
		 	this.lines.className += ' no-wrap';

		// add custom user style name
		className += ' ' + this.getParam('class-name');
		
		// add brush alias to the class name for custom CSS
		className += ' ' + this.getParam('brush-name');
		
		div.className = className;
		
		this.originalCode = code;
		this.code = sh.utils.trimFirstAndLastLines(code)
			.replace(/\r/g, ' ') // IE lets these buggers through
			;
		
		tabSize = this.getParam('tab-size');
		
		// replace tabs with spaces
		this.code = this.getParam('smart-tabs') == true
			? sh.utils.processSmartTabs(this.code, tabSize)
			: sh.utils.processTabs(this.code, tabSize)
			;

		this.code = sh.utils.unindent(this.code);

		// add controls toolbar
		if (this.getParam('toolbar')) 
		{
			this.bar = this.create('DIV');
			this.bar.className = 'bar';
			this.bar.appendChild(sh.toolbar.create(this));
			div.appendChild(this.bar);
			
			// set up toolbar rollover
			var bar = this.bar;
			function hide() { bar.className = bar.className.replace('show', ''); }
			div.onmouseover = function() { hide(); bar.className += ' show'; };
			div.onmouseout = function() { hide(); }
		}
		
		div.appendChild(this.lines);
	
		this.matches = this.findMatches(this.regexList, this.code);
		this.removeNestedMatches();
		
		code = this.processMatches(this.code, this.matches);


		
		// finally, split all lines so that they wrap well
		code = this.createDisplayLines(sh.utils.trim(code));
		
		// finally, process the links
		if (this.getParam('auto-links'))
			code = sh.utils.processUrls(code);
                
                code = code.replace("&nbsp;","&#160;", "g");
                
		this.lines.innerHTML = code;
	},
	
	/**
	 * Converts space separated list of keywords into a regular expression string.
	 * @param {String} str    Space separated keywords.
	 * @return {String}       Returns regular expression string.
	 */	
	getKeywords: function(str)
	{
		str = str
			.replace(/^\s+|\s+$/g, '')
			.replace(/\s+/g, '|')
			;
		
		return '\\b(?:' + str + ')\\b';
	},
	
	/**
	 * Makes a brush compatible with the `html-script` functionality.
	 * @param {Object} regexGroup Object containing `left` and `right` regular expressions.
	 */
	forHtmlScript: function(regexGroup)
	{
		this.htmlScript = {
			left : { regex: regexGroup.left, css: 'script' },
			right : { regex: regexGroup.right, css: 'script' },
			code : new XRegExp(
				"(?<left>" + regexGroup.left.source + ")" +
				"(?<code>.*?)" +
				"(?<right>" + regexGroup.right.source + ")",
				"sgi"
				)
		};
	}
}; // end of Highlighter

return sh;
}(); // end of anonymous function


/**
 * XRegExp 0.6.1
 * (c) 2007-2008 Steven Levithan
 * <http://stevenlevithan.com/regex/xregexp/>
 * MIT License
 * 
 * provides an augmented, cross-browser implementation of regular expressions
 * including support for additional modifiers and syntax. several convenience
 * methods and a recursive-construct parser are also included.
 */

// prevent running twice, which would break references to native globals
if (!window.XRegExp) {
// anonymous function to avoid global variables
(function () {
// copy various native globals for reference. can't use the name ``native``
// because it's a reserved JavaScript keyword.
var real = {
        exec:    RegExp.prototype.exec,
        match:   String.prototype.match,
        replace: String.prototype.replace,
        split:   String.prototype.split
    },
    /* regex syntax parsing with support for all the necessary cross-
       browser and context issues (escapings, character classes, etc.) */
    lib = {
        part:       /(?:[^\\([#\s.]+|\\(?!k<[\w$]+>|[pP]{[^}]+})[\S\s]?|\((?=\?(?!#|<[\w$]+>)))+|(\()(?:\?(?:(#)[^)]*\)|<([$\w]+)>))?|\\(?:k<([\w$]+)>|[pP]{([^}]+)})|(\[\^?)|([\S\s])/g,
        replaceVar: /(?:[^$]+|\$(?![1-9$&`']|{[$\w]+}))+|\$(?:([1-9]\d*|[$&`'])|{([$\w]+)})/g,
        extended:   /^(?:\s+|#.*)+/,
        quantifier: /^(?:[?*+]|{\d+(?:,\d*)?})/,
        classLeft:  /&&\[\^?/g,
        classRight: /]/g
    },
    indexOf = function (array, item, from) {
        for (var i = from || 0; i < array.length; i++)
            if (array[i] === item) return i;
        return -1;
    },
    brokenExecUndef = /()??/.exec("")[1] !== undefined,
    plugins = {};

/**
 * Accepts a pattern and flags, returns a new, extended RegExp object.
 * differs from a native regex in that additional flags and syntax are
 * supported and browser inconsistencies are ameliorated.
 * @ignore
 */
XRegExp = function (pattern, flags) {
    if (pattern instanceof RegExp) {
        if (flags !== undefined)
            throw TypeError("can't supply flags when constructing one RegExp from another");
        return pattern.addFlags(); // new copy
    }

    var flags           = flags || "",
        singleline      = flags.indexOf("s") > -1,
        extended        = flags.indexOf("x") > -1,
        hasNamedCapture = false,
        captureNames    = [],
        output          = [],
        part            = lib.part,
        match, cc, len, index, regex;

    part.lastIndex = 0; // in case the last XRegExp compilation threw an error (unbalanced character class)

    while (match = real.exec.call(part, pattern)) {
        // comment pattern. this check must come before the capturing group check,
        // because both match[1] and match[2] will be non-empty.
        if (match[2]) {
            // keep tokens separated unless the following token is a quantifier
            if (!lib.quantifier.test(pattern.slice(part.lastIndex)))
                output.push("(?:)");
        // capturing group
        } else if (match[1]) {
            captureNames.push(match[3] || null);
            if (match[3])
                hasNamedCapture = true;
            output.push("(");
        // named backreference
        } else if (match[4]) {
            index = indexOf(captureNames, match[4]);
            // keep backreferences separate from subsequent literal numbers
            // preserve backreferences to named groups that are undefined at this point as literal strings
            output.push(index > -1 ?
                "\\" + (index + 1) + (isNaN(pattern.charAt(part.lastIndex)) ? "" : "(?:)") :
                match[0]
            );
        // unicode element (requires plugin)
        } else if (match[5]) {
            output.push(plugins.unicode ?
                plugins.unicode.get(match[5], match[0].charAt(1) === "P") :
                match[0]
            );
        // character class opening delimiter ("[" or "[^")
        // (non-native unicode elements are not supported within character classes)
        } else if (match[6]) {
            if (pattern.charAt(part.lastIndex) === "]") {
                // for cross-browser compatibility with ECMA-262 v3 behavior,
                // convert [] to (?!) and [^] to [\S\s].
                output.push(match[6] === "[" ? "(?!)" : "[\\S\\s]");
                part.lastIndex++;
            } else {
                // parse the character class with support for inner escapes and
                // ES4's infinitely nesting intersection syntax ([&&[^&&[]]]).
                cc = XRegExp.matchRecursive("&&" + pattern.slice(match.index), lib.classLeft, lib.classRight, "", {escapeChar: "\\"})[0];
                output.push(match[6] + cc + "]");
                part.lastIndex += cc.length + 1;
            }
        // dot ("."), pound sign ("#"), or whitespace character
        } else if (match[7]) {
            if (singleline && match[7] === ".") {
                output.push("[\\S\\s]");
            } else if (extended && lib.extended.test(match[7])) {
                len = real.exec.call(lib.extended, pattern.slice(part.lastIndex - 1))[0].length;
                // keep tokens separated unless the following token is a quantifier
                if (!lib.quantifier.test(pattern.slice(part.lastIndex - 1 + len)))
                    output.push("(?:)");
                part.lastIndex += len - 1;
            } else {
                output.push(match[7]);
            }
        } else {
            output.push(match[0]);
        }
    }

    regex = RegExp(output.join(""), real.replace.call(flags, /[sx]+/g, ""));
    regex._x = {
        source:       pattern,
        captureNames: hasNamedCapture ? captureNames : null
    };
    return regex;
};

/**
 * Barebones plugin support for now (intentionally undocumented)
 * @ignore
 * @param {Object} name
 * @param {Object} o
 */
XRegExp.addPlugin = function (name, o) {
    plugins[name] = o;
};

/**
 * Adds named capture support, with values returned as ``result.name``.
 * 
 * Also fixes two cross-browser issues, following the ECMA-262 v3 spec:
 *  - captured values for non-participating capturing groups should be returned
 *    as ``undefined``, rather than the empty string.
 *  - the regex's ``lastIndex`` should not be incremented after zero-length
 *    matches.
 * @ignore
 */
RegExp.prototype.exec = function (str) {
    var match = real.exec.call(this, str),
        name, i, r2;
    if (match) {
        // fix browsers whose exec methods don't consistently return
        // undefined for non-participating capturing groups
        if (brokenExecUndef && match.length > 1) {
            // r2 doesn't need /g or /y, but they shouldn't hurt
            r2 = new RegExp("^" + this.source + "$(?!\\s)", this.getNativeFlags());
            real.replace.call(match[0], r2, function () {
                for (i = 1; i < arguments.length - 2; i++) {
                    if (arguments[i] === undefined) match[i] = undefined;
                }
            });
        }
        // attach named capture properties
        if (this._x && this._x.captureNames) {
            for (i = 1; i < match.length; i++) {
                name = this._x.captureNames[i - 1];
                if (name) match[name] = match[i];
            }
        }
        // fix browsers that increment lastIndex after zero-length matches
        if (this.global && this.lastIndex > (match.index + match[0].length))
            this.lastIndex--;
    }
    return match;
};
})(); // end anonymous function
} // end if(!window.XRegExp)

/**
 * intentionally undocumented
 * @ignore
 */
RegExp.prototype.getNativeFlags = function () {
    return (this.global     ? "g" : "") +
           (this.ignoreCase ? "i" : "") +
           (this.multiline  ? "m" : "") +
           (this.extended   ? "x" : "") +
           (this.sticky     ? "y" : "");
};

/**
 * Accepts flags; returns a new XRegExp object generated by recompiling
 * the regex with the additional flags (may include non-native flags).
 * The original regex object is not altered.
 * @ignore
 */
RegExp.prototype.addFlags = function (flags) {
    var regex = new XRegExp(this.source, (flags || "") + this.getNativeFlags());
    if (this._x) {
        regex._x = {
            source:       this._x.source,
            captureNames: this._x.captureNames ? this._x.captureNames.slice(0) : null
        };
    }
    return regex;
};

/**
 * Accepts a context object and string; returns the result of calling
 * ``exec`` with the provided string. the context is ignored but is
 * accepted for congruity with ``Function.prototype.call``.
 * @ignore
 */
RegExp.prototype.call = function (context, str) {
    return this.exec(str);
};

/**
 * Accepts a context object and arguments array; returns the result of
 * calling ``exec`` with the first value in the arguments array. the context
 * is ignored but is accepted for congruity with ``Function.prototype.apply``.
 * @ignore
 */
RegExp.prototype.apply = function (context, args) {
    return this.exec(args[0]);
};

/**
 * Accepts a pattern and flags; returns an XRegExp object. if the pattern
 * and flag combination has previously been cached, the cached copy is
 * returned, otherwise the new object is cached.
 * @ignore
 */
XRegExp.cache = function (pattern, flags) {
    var key = "/" + pattern + "/" + (flags || "");
    return XRegExp.cache[key] || (XRegExp.cache[key] = new XRegExp(pattern, flags));
};

/**
 * Accepts a string; returns the string with regex metacharacters escaped.
 * the returned string can safely be used within a regex to match a literal
 * string. escaped characters are [, ], {, }, (, ), -, *, +, ?, ., \, ^, $,
 * |, #, [comma], and whitespace.
 * @ignore
 */
XRegExp.escape = function (str) {
    return str.replace(/[-[\]{}()*+?.\\^$|,#\s]/g, "\\$&");
};

/**
 * Accepts a string to search, left and right delimiters as regex pattern
 * strings, optional regex flags (may include non-native s, x, and y flags),
 * and an options object which allows setting an escape character and changing
 * the return format from an array of matches to a two-dimensional array of
 * string parts with extended position data. returns an array of matches
 * (optionally with extended data), allowing nested instances of left and right
 * delimiters. use the g flag to return all matches, otherwise only the first
 * is returned. if delimiters are unbalanced within the subject data, an error
 * is thrown.
 * 
 * This function admittedly pushes the boundaries of what can be accomplished
 * sensibly without a "real" parser. however, by doing so it provides flexible
 * and powerful recursive parsing capabilities with minimal code weight.
 * 
 * Warning: the ``escapeChar`` option is considered experimental and might be
 * changed or removed in future versions of XRegExp.
 * 
 * unsupported features:
 *  - backreferences within delimiter patterns when using ``escapeChar``.
 *  - although providing delimiters as regex objects adds the minor feature of
 *    independent delimiter flags, it introduces other limitations and is only
 *    intended to be done by the ``XRegExp`` constructor (which can't call
 *    itself while building a regex).
 * 
 * @ignore
 */
XRegExp.matchRecursive = function (str, left, right, flags, options) {
    var options      = options || {},
        escapeChar   = options.escapeChar,
        vN           = options.valueNames,
        flags        = flags || "",
        global       = flags.indexOf("g") > -1,
        ignoreCase   = flags.indexOf("i") > -1,
        multiline    = flags.indexOf("m") > -1,
        sticky       = flags.indexOf("y") > -1,
        /* sticky mode has its own handling in this function, which means you
           can use flag "y" even in browsers which don't support it natively */
        flags        = flags.replace(/y/g, ""),
        left         = left  instanceof RegExp ? (left.global  ? left  : left.addFlags("g"))  : new XRegExp(left,  "g" + flags),
        right        = right instanceof RegExp ? (right.global ? right : right.addFlags("g")) : new XRegExp(right, "g" + flags),
        output       = [],
        openTokens   = 0,
        delimStart   = 0,
        delimEnd     = 0,
        lastOuterEnd = 0,
        outerStart, innerStart, leftMatch, rightMatch, escaped, esc;

    if (escapeChar) {
        if (escapeChar.length > 1) throw SyntaxError("can't supply more than one escape character");
        if (multiline)             throw TypeError("can't supply escape character when using the multiline flag");
        escaped = XRegExp.escape(escapeChar);
        /* Escape pattern modifiers:
            /g - not needed here
            /i - included
            /m - **unsupported**, throws error
            /s - handled by XRegExp when delimiters are provided as strings
            /x - handled by XRegExp when delimiters are provided as strings
            /y - not needed here; supported by other handling in this function
        */
        esc = new RegExp(
            "^(?:" + escaped + "[\\S\\s]|(?:(?!" + left.source + "|" + right.source + ")[^" + escaped + "])+)+",
            ignoreCase ? "i" : ""
        );
    }

    while (true) {
        /* advance the starting search position to the end of the last delimiter match.
           a couple special cases are also covered:
            - if using an escape character, advance to the next delimiter's starting position,
              skipping any escaped characters
            - first time through, reset lastIndex in case delimiters were provided as regexes
        */
        left.lastIndex = right.lastIndex = delimEnd +
            (escapeChar ? (esc.exec(str.slice(delimEnd)) || [""])[0].length : 0);

        leftMatch  = left.exec(str);
        rightMatch = right.exec(str);

        // only keep the result which matched earlier in the string
        if (leftMatch && rightMatch) {
            if (leftMatch.index <= rightMatch.index)
                 rightMatch = null;
            else leftMatch  = null;
        }

        /* paths*:
        leftMatch | rightMatch | openTokens | result
        1         | 0          | 1          | ...
        1         | 0          | 0          | ...
        0         | 1          | 1          | ...
        0         | 1          | 0          | throw
        0         | 0          | 1          | throw
        0         | 0          | 0          | break
        * - does not include the sticky mode special case
          - the loop ends after the first completed match if not in global mode
        */

        if (leftMatch || rightMatch) {
            delimStart = (leftMatch || rightMatch).index;
            delimEnd   = (leftMatch ? left : right).lastIndex;
        } else if (!openTokens) {
            break;
        }

        if (sticky && !openTokens && delimStart > lastOuterEnd)
            break;

        if (leftMatch) {
            if (!openTokens++) {
                outerStart = delimStart;
                innerStart = delimEnd;
            }
        } else if (rightMatch && openTokens) {
            if (!--openTokens) {
                if (vN) {
                    if (vN[0] && outerStart > lastOuterEnd)
                               output.push([vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart]);
                    if (vN[1]) output.push([vN[1], str.slice(outerStart,   innerStart), outerStart,   innerStart]);
                    if (vN[2]) output.push([vN[2], str.slice(innerStart,   delimStart), innerStart,   delimStart]);
                    if (vN[3]) output.push([vN[3], str.slice(delimStart,   delimEnd),   delimStart,   delimEnd]);
                } else {
                    output.push(str.slice(innerStart, delimStart));
                }
                lastOuterEnd = delimEnd;
                if (!global)
                    break;
            }
        } else {
            // reset lastIndex in case delimiters were provided as regexes
            left.lastIndex = right.lastIndex = 0;
            throw Error("subject data contains unbalanced delimiters");
        }

        // if the delimiter matched an empty string, advance delimEnd to avoid an infinite loop
        if (delimStart === delimEnd)
            delimEnd++;
    }

    if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd)
        output.push([vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length]);

    // reset lastIndex in case delimiters were provided as regexes
    left.lastIndex = right.lastIndex = 0;

    return output;
};
_text/javascript‘ !"#_Ehttps://www.cs.sfu.ca/~ggbaker/js/syntaxhighlighter/styles/shCore.cssO]bplist00‘vwX$versionX$objectsY$archiverT$top Ü†Ø'"()012RSTUVWXYZ[\]^_`abcdefghijklopqU$null›	
 !R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1ÄÄÄ Ä$Ä&ÄÄ%Ä”#$%&'WNS.base[NS.relativeÄ ÄÄ_Ehttps://www.cs.sfu.ca/~ggbaker/js/syntaxhighlighter/styles/shCore.css“*+,-Z$classnameX$classesUNSURL¢./UNSURLXNSObject#AπQŒÕ9¸»”345CQWNS.keysZNS.objects≠6789:;<=>?@ABÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄ≠DEFGHIJKLMNOPÄÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#\Content-TypeZKeep-AliveVServer_Content-Style-TypeWExpiresSbox]Cache-ControlTDate^Content-LengthZConnection]Accept-RangesTEtag]Last-ModifiedXtext/css_timeout=2, max=200_oApache/2.0.59 (Unix) mod_fastcgi/2.4.2 proxy_html/3.1.2 SVN/1.4.4 DAV/2 mod_ssl/2.0.59 OpenSSL/0.9.8k PHP/5.2.8Xtext/css_Wed, 18 Jun 2014 12:11:58 GMT_b4 D=170869 t=1403050318121389]max-age=43200_Wed, 18 Jun 2014 00:11:58 GMTT7200ZKeep-AliveUbytes_"37a19-1c20-fefda680"_Wed, 14 Jul 2010 23:03:38 GMT“*+mn\NSDictionary¢m/ Xtext/css“*+rs_NSHTTPURLResponse£tu/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—xy_WebResourceResponseÄ    # - 2 7 a g Ç Ö â å è í ñ ô † £ ¶ © ¨ Ø ± ≥ µ ∑ π ª Ω ø ¡ √ ≈ « Œ ÷ ‚ ‰ Ê Ë05@IORXajls{Üîñòöúû†¢§¶®™¨Æºæ¿¬ƒ∆» ÃŒ–“‘÷ÿÂ˜&+:ESXfoÑˆˇ@Nns~Ñúº¡Œ—‘›‚ˆ˙.1G             z              IO /**
 * SyntaxHighlighter
 * http://alexgorbatchev.com/
 *
 * SyntaxHighlighter is donationware. If you are using it, please donate.
 * http://alexgorbatchev.com/wiki/SyntaxHighlighter:Donate
 *
 * @version
 * 2.1.364 (October 15 2009)
 * 
 * @copyright
 * Copyright (C) 2004-2009 Alex Gorbatchev.
 *
 * @license
 * This file is part of SyntaxHighlighter.
 * 
 * SyntaxHighlighter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SyntaxHighlighter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SyntaxHighlighter.  If not, see <http://www.gnu.org/copyleft/lesser.html>.
 */
.syntaxhighlighter,
.syntaxhighlighter div,
.syntaxhighlighter code,
.syntaxhighlighter table,
.syntaxhighlighter table td,
.syntaxhighlighter table tr,
.syntaxhighlighter table tbody
{
	margin: 0 !important;
	padding: 0 !important;
	border: 0 !important;
	outline: 0 !important;
	background: none !important;
	text-align: left !important;
	float: none !important;
	vertical-align: baseline !important;
	position: static !important;
	left: auto !important;
	top: auto !important;
	right: auto !important;
	bottom: auto !important;
	height: auto !important;
	width: auto !important;
	line-height: 1.1em !important;
	font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
	font-weight: normal !important;
	font-style: normal !important;
	font-size: 1em !important;
	min-height: inherit !important; /* For IE8, FF & WebKit */
	min-height: auto !important; /* For IE7 */
}

.syntaxhighlighter
{
	width: 99% !important; /* 99% fixes IE8 horizontal scrollbar */
	margin: 1em 0 1em 0 !important;
	/*padding: 1px !important;*/ /* adds a little border on top and bottom */
	position: relative !important;
}

.syntaxhighlighter .bold 
{
	font-weight: bold !important;
}

.syntaxhighlighter .italic 
{
	font-style: italic !important;
}

.syntaxhighlighter .line
{
}

.syntaxhighlighter .no-wrap .line .content
{
	white-space: pre !important;
}

.syntaxhighlighter .line table 
{
	border-collapse: collapse !important;
}

.syntaxhighlighter .line td
{
	vertical-align: top !important;
}

.syntaxhighlighter .line .number
{
	width: 3em !important;
}

.syntaxhighlighter .line .number code
{
	width: 2.7em !important;
	padding-right: .3em !important;
	text-align: right !important;
	display: block !important;
}

.syntaxhighlighter .line .content
{
	padding-left: .5em !important;
}

.syntaxhighlighter .line .spaces
{
}

/* Disable border and margin on the lines when no gutter option is set */
.syntaxhighlighter.nogutter .line .content
{
	border-left: none !important;
}

.syntaxhighlighter .bar
{
	display: none !important;
}

.syntaxhighlighter .bar.show 
{
	display: block !important;
}

.syntaxhighlighter.collapsed .bar
{
	display: block !important;
}

/* Adjust some properties when collapsed */

.syntaxhighlighter.collapsed .lines
{
	display: none !important;
}

.syntaxhighlighter .lines.no-wrap
{
	overflow: auto !important;
	overflow-y: hidden !important;
}

/* Styles for the toolbar */

.syntaxhighlighter .toolbar
{
	position: absolute !important;
	right: 0px !important;
	top: 0px !important;
	font-size: 1px !important;
	padding: 8px 8px 8px 0 !important; /* in px because images don't scale with ems */
}

.syntaxhighlighter.collapsed .toolbar
{
	font-size: 80% !important;
	padding: .2em 0 .5em .5em !important;
	position: static !important;
}

.syntaxhighlighter .toolbar a.item,
.syntaxhighlighter .toolbar .item
{
	display: block !important;
	float: left !important;
	margin-left: 8px !important;
	background-repeat: no-repeat !important;
	overflow: hidden !important;
	text-indent: -5000px !important;
}

.syntaxhighlighter.collapsed .toolbar .item
{
	display: none !important;
}

.syntaxhighlighter.collapsed .toolbar .item.expandSource
{
	background-image: url(magnifier.png) !important;
	display: inline !important;
	text-indent: 0 !important;
	width: auto !important;
	float: none !important;
	height: 16px !important;
	padding-left: 20px !important;
}

.syntaxhighlighter .toolbar .item.viewSource
{
	background-image: url(page_white_code.png) !important;
}

.syntaxhighlighter .toolbar .item.printSource
{
	background-image: url(printer.png) !important;
}

.syntaxhighlighter .toolbar .item.copyToClipboard
{
	text-indent: 0 !important;
	background: none !important;
	overflow: visible !important;
}

.syntaxhighlighter .toolbar .item.about
{
	background-image: url(help.png) !important;
}

/** 
 * Print view.
 * Colors are based on the default theme without background.
 */

.syntaxhighlighter.printing,
.syntaxhighlighter.printing .line.alt1 .content,
.syntaxhighlighter.printing .line.alt2 .content,
.syntaxhighlighter.printing .line.highlighted .number,
.syntaxhighlighter.printing .line.highlighted.alt1 .content,
.syntaxhighlighter.printing .line.highlighted.alt2 .content,
{
	background: none !important;
}

/* Gutter line numbers */
.syntaxhighlighter.printing .line .number
{
	color: #bbb !important;
}

/* Add border to the lines */
.syntaxhighlighter.printing .line .content
{
	color: #000 !important;
}

/* Toolbar when visible */
.syntaxhighlighter.printing .toolbar
{
	display: none !important;
}

.syntaxhighlighter.printing a
{
	text-decoration: none !important;
}

.syntaxhighlighter.printing .plain,
.syntaxhighlighter.printing .plain a
{ 
	color: #000 !important;
}

.syntaxhighlighter.printing .comments,
.syntaxhighlighter.printing .comments a
{ 
	color: #008200 !important;
}

.syntaxhighlighter.printing .string,
.syntaxhighlighter.printing .string a
{
	color: blue !important; 
}

.syntaxhighlighter.printing .keyword
{ 
	color: #069 !important; 
	font-weight: bold !important; 
}

.syntaxhighlighter.printing .preprocessor 
{ 
	color: gray !important; 
}

.syntaxhighlighter.printing .variable 
{ 
	color: #a70 !important; 
}

.syntaxhighlighter.printing .value
{ 
	color: #090 !important; 
}

.syntaxhighlighter.printing .functions
{ 
	color: #ff1493 !important; 
}

.syntaxhighlighter.printing .constants
{ 
	color: #0066CC !important; 
}

.syntaxhighlighter.printing .script
{
	font-weight: bold !important;
}

.syntaxhighlighter.printing .color1,
.syntaxhighlighter.printing .color1 a
{ 
	color: #808080 !important; 
}

.syntaxhighlighter.printing .color2,
.syntaxhighlighter.printing .color2 a
{ 
	color: #ff1493 !important; 
}

.syntaxhighlighter.printing .color3,
.syntaxhighlighter.printing .color3 a
{ 
	color: red !important; 
}
Xtext/css‘%&'(_3https://www.cs.sfu.ca/~ggbaker/js/shBrushHaskell.jsO[bplist00‘vwX$versionX$objectsY$archiverT$top Ü†Ø'"()012RSTUVWXYZ[\]^_`abcdefghijklopqU$null›	
 !R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1ÄÄÄ Ä$Ä&ÄÄ%Ä”#$%&'WNS.base[NS.relativeÄ ÄÄ_3https://www.cs.sfu.ca/~ggbaker/js/shBrushHaskell.js“*+,-Z$classnameX$classesUNSURL¢./UNSURLXNSObject#AπQŒÃï[»”345CQWNS.keysZNS.objects≠6789:;<=>?@ABÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄ≠DEFGHIJKLMNOPÄÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#\Content-TypeZKeep-AliveVServer_Content-Style-TypeWExpiresSbox]Cache-ControlTDate^Content-LengthZConnection]Accept-RangesTEtag]Last-Modified_text/javascript_timeout=2, max=200_oApache/2.0.59 (Unix) mod_fastcgi/2.4.2 proxy_html/3.1.2 SVN/1.4.4 DAV/2 mod_ssl/2.0.59 OpenSSL/0.9.8k PHP/5.2.8Xtext/css_Wed, 18 Jun 2014 12:11:58 GMT_b3 D=165110 t=1403050318147694]max-age=43200_Wed, 18 Jun 2014 00:11:58 GMTT4058ZKeep-AliveUbytes_"37a75-fda-17e8500"_Wed, 14 Jul 2010 23:04:20 GMT“*+mn\NSDictionary¢m/⁄_text/javascript“*+rs_NSHTTPURLResponse£tu/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—xy_WebResourceResponseÄ    # - 2 7 a g Ç Ö â å è í ñ ô † £ ¶ © ¨ Ø ± ≥ µ ∑ π ª Ω ø ¡ √ ≈ « Œ ÷ ‚ ‰ Ê Ë#.7=@FOXZaitÇÑÜàäåéêíîñòöú™¨Æ∞≤¥∂∏∫ºæ¿¬ƒ∆”ﬁÂ˙(3AFTf{Ìˆ7Eeju{ë±∂√∆…€‡Ù¯,/E             z              GO⁄// from http://watashi.ws/blog/48/my-syntaxhighlighter-2-0-haskell-brush/
SyntaxHighlighter.brushes.Haskell = function()
{
	// Copyright 2009 watashi
    // http://watashi.ws/blog
    // Zejun.WU@gmail.com

    var constants = 'True False Nothing Just Left Right LT EQ GT';

	var datatypes =	'Bool Maybe Either Ordering Char String Int Integer Float Double Rational ' +
                    'IO ReadS ShowS FilePath IOError Monad Functor Show Read' +
                    'Eq Ord Enum Bounded Num Real Integral Fractional Floating RealFrac RealFloat';

	var functions =	'abs acos acosh all and any appendFile applyM asTypeOf asin asinh atan atan2 atanh ' +
                    'break catch ceiling compare concat concatMap const cos cosh curry cycle ' +
                    'decodeFloat div divMod drop dropWhile elem encodeFloat enumFrom enumFromThen ' +
                    'enumFromThenTo enumFromTo error even exp exponent fail filter flip floatDigits ' +
                    'floatRadix floatRange floor fmap foldl foldl1 foldr foldr1 fromEnum fromInteger ' +
                    'fromIntegral fromRational fst gcd getChar getContents getLine head id init interact ' +
                    'ioError isDenormalized isIEEE isInfinite isNaN isNegativeZero iterate last lcm ' +
                    'length lex lines log logBase lookup map mapM mapM_ max maxBound maximum maybe min ' +
                    'minBound minimum mod negate not notElem null odd or otherwise pi pred print product ' +
                    'properFraction putChar putStr putStrLn quot quotRem read readFile readIO readList ' +
                    'readLn readParen reads readsPrec realToFrac recip rem repeat replicate return ' +
                    'reverse round scaleFloat scanl scanl1 scanr scanr1 seq sequence sequence_ show ' +
                    'showChar showList showParen showString shows showsPrec significand signum sin sinh ' +
                    'snd span splitAt sqrt subtract succ sum tail take takeWhile tan tanh toEnum ' +
                    'toInteger toRational truncate uncurry undefined unlines until unwords unzip unzip3 ' +
                    'userError words writeFile zip zip3 zipWith zipWith3';    

	var keywords =	'as case of class data default deriving do forall foreign hiding ' +
                    'if then else import instance let in mdo module newtype qualified type where';

	this.findMatches = function(regexList, code) {
		code = code.replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&amp;/g, '&');
		this.code = code;
		return SyntaxHighlighter.Highlighter.prototype.findMatches.apply(this, [regexList, code]);
	};

    this.regexList = [
		{ regex: /{-#[\s\S]*?#-}/g,	                                css: 'preprocessor' },
		{ regex: /--.*/g,	                                        css: 'comments' },      // one line comments
		{ regex: /{-(?!\$)[\s\S]*?-}/gm,	                        css: 'comments' },      // multiline comments
		{ regex: /'.'/g,                                     		css: 'string' },        // chars
		{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },        // strings
        { regex: /([-!#$%&*+/<=>?@^|~:.\\])+/g,                     css: 'keyword bold' },  // infix operators
        { regex: /`[a-z][a-z0-9_']*`/g,                             css: 'keyword bold' },  // infix operators
        { regex: /\b(\d+|0x[0-9a-f]+)\b/gi,                         css: 'value' },         // integer
        { regex: /\b\d+(\.\d*)?([eE][+-]?\d+)?\b/gi,                css: 'value' },         // floating number
        { regex: new RegExp(this.getKeywords(constants), 'g'),      css: 'color1 bold' },
		{ regex: new RegExp(this.getKeywords(datatypes), 'g'),		css: 'color1 bold' },
		{ regex: new RegExp(this.getKeywords(functions), 'g'),		css: 'functions bold' },
		{ regex: new RegExp(this.getKeywords(keywords), 'gm'),   	css: 'keyword bold' }
	];
};

SyntaxHighlighter.brushes.Haskell.prototype	= new SyntaxHighlighter.Highlighter();
SyntaxHighlighter.brushes.Haskell.aliases	= ['haskell'];

_text/javascript‘*+,-_5https://www.cs.sfu.ca/~ggbaker/js/shBrushGnuProlog.jsO^bplist00‘vwX$versionX$objectsY$archiverT$top Ü†Ø'"()012RSTUVWXYZ[\]^_`abcdefghijklopqU$null›	
 !R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1ÄÄÄ Ä$Ä&ÄÄ%Ä”#$%&'WNS.base[NS.relativeÄ ÄÄ_5https://www.cs.sfu.ca/~ggbaker/js/shBrushGnuProlog.js“*+,-Z$classnameX$classesUNSURL¢./UNSURLXNSObject#AπQŒ∆{ƒ»”345CQWNS.keysZNS.objects≠6789:;<=>?@ABÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄ≠DEFGHIJKLMNOPÄÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#\Content-TypeZKeep-AliveVServer_Content-Style-TypeWExpiresSbox]Cache-ControlTDate^Content-LengthZConnection]Accept-RangesTEtag]Last-Modified_text/javascript_timeout=2, max=200_oApache/2.0.59 (Unix) mod_fastcgi/2.4.2 proxy_html/3.1.2 SVN/1.4.4 DAV/2 mod_ssl/2.0.59 OpenSSL/0.9.8k PHP/5.2.8Xtext/css_Wed, 18 Jun 2014 12:11:58 GMT_b4 D=163450 t=1403050318124636]max-age=43200_Wed, 18 Jun 2014 00:11:58 GMTT8449ZKeep-AliveUbytes_"378c2-2101-1b7d480"_Fri, 23 Jul 2010 17:02:58 GMT“*+mn\NSDictionary¢m/!_text/javascript“*+rs_NSHTTPURLResponse£tu/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—xy_WebResourceResponseÄ    # - 2 7 a g Ç Ö â å è í ñ ô † £ ¶ © ¨ Ø ± ≥ µ ∑ π ª Ω ø ¡ √ ≈ « Œ ÷ ‚ ‰ Ê Ë %09?BHQZ\ckvÑÜàäåéêíîñòöúû¨Æ∞≤¥∂∏∫ºæ¿¬ƒ∆»’‡Á¸*5CHVh}Ô¯9Gglw}î¥π∆…Ãﬁ„˜˚/2H             z              JO!/* from http://fxnion.free.fr/articles/gnu-prolog-syntax-highlighter.php */
/**
 * SyntaxHighlighter
 * http://alexgorbatchev.com/
 *
 * SyntaxHighlighter is donationware. If you are using it, please donate.
 * http://alexgorbatchev.com/wiki/SyntaxHighlighter:Donate
 *
 * @version
 * 2.0.320 (May 03 2009)
 * 
 * @copyright
 * Copyright (C) 2004-2009 Alex Gorbatchev.
 *
 * @license
 * This file is part of SyntaxHighlighter.
 * 
 * SyntaxHighlighter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SyntaxHighlighter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SyntaxHighlighter.  If not, see <http://www.gnu.org/copyleft/lesser.html>.
 */
SyntaxHighlighter.brushes.GnuProlog = function()
{
	var funcs	=	'is abolish abort absolute_file_name  absolute_file_name add_linedit_completion add_stream_alias add_stream_mirror alias  alias  append  append append architecture arg argument_counter argument_list argument_value asserta assertz at_end_of_stream at_end_of_stream atom atom_chars atom_codes atom_concat atom_hash atom_length atom_property atomic back_quotes  backtracks  bagof binary  bind_variables bip_name  block  block_device  bof  boolean  bounded  bounds  break buffering  buffering  built_in  built_in built_in built_in_fd  built_in_fd built_in_fd call call call_det call_with_args callable catch change_directory char_code char_conversion  char_conversion char_conversion character_count character_device  choice_size  clause close close close_input_atom_stream close_input_chars_stream close_input_codes_stream close_output_atom_stream close_output_chars_stream close_output_codes_stream compare compound consult copy_term cpu_time create_pipe current  current_alias current_atom current_bip_name current_char_conversion current_input current_mirror current_op current_output current_predicate current_prolog_flag current_stream date_time debug  debug debugging decompose_file_name delete delete_directory delete_file directory  directory_files discontiguous display display display_to_atom display_to_chars display_to_codes double_quotes  dynamic  dynamic   end_of_stream  end_of_term  ensure_linked ensure_loaded environ eof  eof_action  eof_action  eof_code  error  exclude  exec exec execute  expand_term extended  extra_cstr  fail  fail fct_name  fd_all_different fd_at_least_one fd_at_most_one fd_atleast fd_atmost fd_cardinality fd_cardinality fd_dom fd_domain fd_domain fd_domain_bool fd_element fd_element_var fd_exactly fd_has_extra_cstr fd_has_vector fd_labeling fd_labeling fd_labelingff fd_max fd_max_integer  fd_max_integer fd_maximize fd_min fd_minimize fd_not_prime fd_only_one fd_prime fd_relation fd_relationc fd_set_vector_max fd_size fd_use_vector fd_var fd_vector_max fifo  file_exists file_name  file_permission file_property find_linedit_completion findall first_fail  float flush_output flush_output for force  foreign foreign fork_prolog format format format_to_atom format_to_chars format_to_codes from  full  functor g_array  g_array_auto  g_array_extend  g_array_size g_assign g_assignb g_dec g_dec g_dec g_deco g_inc g_inc g_inc g_inco g_link g_read g_reset_bit g_set_bit g_test_reset_bit g_test_set_bit generic_var get get0 get_byte get_byte get_char get_char get_code get_code get_key get_key get_key_no_echo get_key_no_echo get_linedit_prompt get_print_stream get_seed gplc half  halt halt hash  hexgplc host_name hostname_address ignore_ops  include infix_op  initialization input  integer integer_rounding_function   jump    keysort keysort   largest  last last_modification  last_read_start_line_column leash length  length line  line_count line_position linedit list list_or_partial_list listing listing load loose  lower_upper make_directory max  max_arity  max_atom  max_depth  max_integer  max_list max_regret  max_unget  member memberchk middle  min  min_integer  min_list mirror  mirror  mode  most_constrained  multifile multifile_warning  name name_query_vars name_singleton_vars namevars  native_code  needs_quotes  needs_scan  new_atom new_atom new_atom next  nl nl nodebug non_fd_var non_generic_var none  none  nonvar nospy nospyall notrace nth number number_atom number_chars number_codes numbervars  numbervars numbervars once op op open open open_input_atom_stream open_input_chars_stream open_input_codes_stream open_output_atom_stream open_output_chars_stream open_output_codes_stream os_error  os_version output  partial_list peek_byte peek_byte peek_char peek_char peek_code peek_code permission  permutation phrase phrase popen portray portray_clause portray_clause portrayed  position  postfix_op  predicate_property prefix prefix_op  print print print_to_atom print_to_chars print_to_codes priority  private  prolog_copyright  prolog_date  prolog_file  prolog_file_name prolog_line  prolog_name  prolog_pid prolog_version  public  public punct  put put_byte put_byte put_char put_char put_code put_code quoted  random  random random randomize read  read  read read read_atom read_atom read_from_atom read_from_chars read_from_codes read_integer read_integer read_number read_number read_pl_state_file read_term read_term read_term_from_atom read_term_from_chars read_term_from_codes read_token read_token read_token_from_atom read_token_from_chars read_token_from_codes real_file_name  real_time regular  remove_stream_mirror rename_file reorder  repeat reposition  reposition  reset  retract retractall return  reverse search  see seeing seek seen select select send_signal set_bip_name set_input set_linedit_prompt set_output set_prolog_flag set_prolog_flag set_seed set_stream_buffering set_stream_eof_action set_stream_line_column set_stream_position set_stream_type setarg setarg setof shell shell shell singleton_warning  singletons  size  skip sleep smallest  socket  socket socket_accept socket_accept socket_bind socket_close socket_connect socket_listen sort sort sort0 sort0 space_args  spawn spawn spy spypoint_condition sr_change_options sr_close sr_current_descriptor sr_error_from_exception sr_get_error_counters sr_get_file_name sr_get_include_list sr_get_include_stream_list sr_get_module sr_get_position sr_get_size_counters sr_get_stream sr_open sr_read_term sr_set_error_counters sr_write_error sr_write_error sr_write_error sr_write_message sr_write_message sr_write_message standard  static  statistics statistics stop stream_line_column stream_position stream_property strict_iso  string  sub_atom sublist suffix sum_list suspicious_warning  syntax_error  syntax_error  syntax_error_info system system system_time tab tell telling temporary_file temporary_name term_ref text  throw tight  told top_level trace true type  type  unget_byte unget_byte unget_char unget_char unget_code unget_code unify_with_occurs_check unknown  unknown  unlink user  user user_input user_output user_time value_method  var  var variable_method  variable_names  variables  vector_max  wait wam_debug warning  working_directory write  write  write write write_canonical write_canonical write_canonical_to_atom write_canonical_to_chars write_canonical_to_codes write_pl_state_file write_term write_term write_term_to_atom write_term_to_chars write_term_to_codes write_to_atom write_to_chars write_to_codes writeq writeq writeq_to_atom writeq_to_chars writeq_to_codes false';


	this.regexList = [
		{ regex: SyntaxHighlighter.regexLib.multiLineCComments,		css: 'comments' },			// multiline comments
		{ regex: /%.*$/gm,											css: 'comments' },			// one line comments
		{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },			// double quoted strings
		{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },			// single quoted strings
		{ regex: /[A-Z]+[a-zA-Z]*/g,									css: 'variable' },		// variables
		{ regex: new RegExp(this.getKeywords(funcs), 'gmi'),		css: 'functions' },			// common functions
		];

};

SyntaxHighlighter.brushes.GnuProlog.prototype	= new SyntaxHighlighter.Highlighter();
SyntaxHighlighter.brushes.GnuProlog.aliases	= ['prolog'];

_text/javascript‘/012_Lhttps://www.cs.sfu.ca/~ggbaker/js/syntaxhighlighter/scripts/shBrushPython.jsOsbplist00‘vwX$versionX$objectsY$archiverT$top Ü†Ø'"()012RSTUVWXYZ[\]^_`abcdefghijklopqU$null›	
 !R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1ÄÄÄ Ä$Ä&ÄÄ%Ä”#$%&'WNS.base[NS.relativeÄ ÄÄ_Lhttps://www.cs.sfu.ca/~ggbaker/js/syntaxhighlighter/scripts/shBrushPython.js“*+,-Z$classnameX$classesUNSURL¢./UNSURLXNSObject#AπQŒ„å⁄»”345CQWNS.keysZNS.objects≠6789:;<=>?@ABÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄ≠DEFGHIJKLMNOPÄÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#\Content-TypeZKeep-AliveVServer_Content-Style-TypeWExpiresSbox]Cache-ControlTDate^Content-LengthZConnection]Accept-RangesTEtag]Last-Modified_text/javascript_timeout=2, max=200_oApache/2.0.59 (Unix) mod_fastcgi/2.4.2 proxy_html/3.1.2 SVN/1.4.4 DAV/2 mod_ssl/2.0.59 OpenSSL/0.9.8k PHP/5.2.8Xtext/css_Wed, 18 Jun 2014 12:11:58 GMT_b4 D=276557 t=1403050318131254]max-age=43200_Wed, 18 Jun 2014 00:11:58 GMTT2970ZKeep-AliveUbytes_"37a50-b9a-f530c0"_Wed, 14 Jul 2010 23:04:11 GMT“*+mn\NSDictionary¢m/ö_text/javascript“*+rs_NSHTTPURLResponse£tu/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—xy_WebResourceResponseÄ    # - 2 7 a g Ç Ö â å è í ñ ô † £ ¶ © ¨ Ø ± ≥ µ ∑ π ª Ω ø ¡ √ ≈ « Œ ÷ ‚ ‰ Ê Ë7<GPVY_hqszÇçõùü°£•ß©´≠Ø±≥µ√≈«…ÀÕœ—”’◊Ÿ€›ﬂÏ˜˛-2ALZ_mî/P^~Ééî©…Œ€ﬁ·Û¯$2DG]             z              _Oö/**
 * SyntaxHighlighter
 * http://alexgorbatchev.com/
 *
 * SyntaxHighlighter is donationware. If you are using it, please donate.
 * http://alexgorbatchev.com/wiki/SyntaxHighlighter:Donate
 *
 * @version
 * 2.1.364 (October 15 2009)
 * 
 * @copyright
 * Copyright (C) 2004-2009 Alex Gorbatchev.
 *
 * @license
 * This file is part of SyntaxHighlighter.
 * 
 * SyntaxHighlighter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SyntaxHighlighter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SyntaxHighlighter.  If not, see <http://www.gnu.org/copyleft/lesser.html>.
 */
SyntaxHighlighter.brushes.Python = function()
{
	// Contributed by Gheorghe Milas and Ahmad Sherif
	
	var keywords =  'and assert break class continue def del elif else ' +
					'except exec finally for from global if import in is ' +
					'lambda not or pass print raise return try yield while';

	var funcs = '__import__ abs all any apply basestring bin bool buffer callable ' +
				'chr classmethod cmp coerce compile complex delattr dict dir ' +
				'divmod enumerate eval execfile file filter float format frozenset ' +
				'getattr globals hasattr hash help hex id input int intern ' +
				'isinstance issubclass iter len list locals long map max min next ' +
				'object oct open ord pow print property range raw_input reduce ' +
				'reload repr reversed round set setattr slice sorted staticmethod ' +
				'str sum super tuple type type unichr unicode vars xrange zip';

	var special =  'None True False self cls class_';

	this.regexList = [
			{ regex: SyntaxHighlighter.regexLib.singleLinePerlComments, css: 'comments' },
			{ regex: /^\s*@\w+/gm, 										css: 'decorator' },
			{ regex: /(['\"]{3})([^\1])*?\1/gm, 						css: 'comments' },
			{ regex: /"(?!")(?:\.|\\\"|[^\""\n])*"/gm, 					css: 'string' },
			{ regex: /'(?!')(?:\.|(\\\')|[^\''\n])*'/gm, 				css: 'string' },
			{ regex: /\+|\-|\*|\/|\%|=|==/gm, 							css: 'keyword' },
			{ regex: /\b\d+\.?\w*/g, 									css: 'value' },
			{ regex: new RegExp(this.getKeywords(funcs), 'gmi'),		css: 'functions' },
			{ regex: new RegExp(this.getKeywords(keywords), 'gm'), 		css: 'keyword' },
			{ regex: new RegExp(this.getKeywords(special), 'gm'), 		css: 'color1' }
			];
			
	this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags);
};

SyntaxHighlighter.brushes.Python.prototype  = new SyntaxHighlighter.Highlighter();
SyntaxHighlighter.brushes.Python.aliases    = ['py', 'python'];
_text/javascript‘4567_Mhttps://www.cs.sfu.ca/~ggbaker/js/syntaxhighlighter/styles/shThemeDefault.cssOdbplist00‘vwX$versionX$objectsY$archiverT$top Ü†Ø'"()012RSTUVWXYZ[\]^_`abcdefghijklopqU$null›	
 !R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1ÄÄÄ Ä$Ä&ÄÄ%Ä”#$%&'WNS.base[NS.relativeÄ ÄÄ_Mhttps://www.cs.sfu.ca/~ggbaker/js/syntaxhighlighter/styles/shThemeDefault.css“*+,-Z$classnameX$classesUNSURL¢./UNSURLXNSObject#AπQŒ›q»”345CQWNS.keysZNS.objects≠6789:;<=>?@ABÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄ≠DEFGHIJKLMNOPÄÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#\Content-TypeZKeep-AliveVServer_Content-Style-TypeWExpiresSbox]Cache-ControlTDate^Content-LengthZConnection]Accept-RangesTEtag]Last-ModifiedXtext/css_timeout=2, max=200_oApache/2.0.59 (Unix) mod_fastcgi/2.4.2 proxy_html/3.1.2 SVN/1.4.4 DAV/2 mod_ssl/2.0.59 OpenSSL/0.9.8k PHP/5.2.8Xtext/css_Wed, 18 Jun 2014 12:11:58 GMT_b3 D=233919 t=1403050318150270]max-age=43200_Wed, 18 Jun 2014 00:11:58 GMTT3529ZKeep-AliveUbytes_"37a17-dc9-fefda680"_Wed, 14 Jul 2010 23:03:38 GMT“*+mn\NSDictionary¢m/…Xtext/css“*+rs_NSHTTPURLResponse£tu/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—xy_WebResourceResponseÄ    # - 2 7 a g Ç Ö â å è í ñ ô † £ ¶ © ¨ Ø ± ≥ µ ∑ π ª Ω ø ¡ √ ≈ « Œ ÷ ‚ ‰ Ê Ë8=HQWZ`irt{Ééúû†¢§¶®™¨Æ∞≤¥∂ƒ∆» ÃŒ–“‘÷ÿ⁄‹ﬁ‡Ì¯ˇ .3BM[`nwå˛'HVv{Üå£√»’ÿ€‰È˝#58N             z              PO…/**
 * SyntaxHighlighter
 * http://alexgorbatchev.com/
 *
 * SyntaxHighlighter is donationware. If you are using it, please donate.
 * http://alexgorbatchev.com/wiki/SyntaxHighlighter:Donate
 *
 * @version
 * 2.1.364 (October 15 2009)
 * 
 * @copyright
 * Copyright (C) 2004-2009 Alex Gorbatchev.
 *
 * @license
 * This file is part of SyntaxHighlighter.
 * 
 * SyntaxHighlighter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SyntaxHighlighter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SyntaxHighlighter.  If not, see <http://www.gnu.org/copyleft/lesser.html>.
 */
/************************************
 * Default Syntax Highlighter theme.
 * 
 * Interface elements.
 ************************************/

.syntaxhighlighter
{
	background-color: #fff !important;
}

/* Highlighed line number */
.syntaxhighlighter .line.highlighted .number
{
	color: black !important;
}

/* Highlighed line */
.syntaxhighlighter .line.highlighted.alt1,
.syntaxhighlighter .line.highlighted.alt2
{
	background-color: #e0e0e0 !important;
}

/* Gutter line numbers */
.syntaxhighlighter .line .number
{
	color: #afafaf !important;
}

/* Add border to the lines */
.syntaxhighlighter .line .content
{
	border-left: 3px solid #6CE26C !important;
	color: #000 !important;
}

.syntaxhighlighter.printing .line .content 
{
	border: 0 !important;
}

/* First line */
.syntaxhighlighter .line.alt1
{
	background-color: #fff !important;
}

/* Second line */
.syntaxhighlighter .line.alt2
{
	background-color: #F8F8F8 !important;
}

.syntaxhighlighter .toolbar
{
	background-color: #F8F8F8 !important;
	border: #E7E5DC solid 1px !important;
}

.syntaxhighlighter .toolbar a
{
	color: #a0a0a0 !important;
}

.syntaxhighlighter .toolbar a:hover
{
	color: red !important;
}

/************************************
 * Actual syntax highlighter colors.
 ************************************/
.syntaxhighlighter .plain,
.syntaxhighlighter .plain a
{ 
	color: #000 !important;
}

.syntaxhighlighter .comments,
.syntaxhighlighter .comments a
{ 
	color: #008200 !important;
}

.syntaxhighlighter .string,
.syntaxhighlighter .string a
{
	color: blue !important; 
}

.syntaxhighlighter .keyword
{ 
	color: #069 !important; 
	font-weight: bold !important; 
}

.syntaxhighlighter .preprocessor 
{ 
	color: gray !important; 
}

.syntaxhighlighter .variable 
{ 
	color: #a70 !important; 
}

.syntaxhighlighter .value
{ 
	color: #090 !important; 
}

.syntaxhighlighter .functions
{ 
	color: #ff1493 !important; 
}

.syntaxhighlighter .constants
{ 
	color: #0066CC !important; 
}

.syntaxhighlighter .script
{ 
	background-color: yellow !important;
}

.syntaxhighlighter .color1,
.syntaxhighlighter .color1 a
{ 
	color: #808080 !important; 
}

.syntaxhighlighter .color2,
.syntaxhighlighter .color2 a
{ 
	color: #ff1493 !important; 
}

.syntaxhighlighter .color3,
.syntaxhighlighter .color3 a
{ 
	color: red !important; 
}
Xtext/css            1   <   K   ]   s   ë   ®   ·  <|  <Ü  <å  <ç  <ñ  <ü  <µ  <·  B4  B˜  C	  C  C9  HÓ  ba  bj  bs  b∑  h& [ [ [ [d `≈ |È |Ú |˚ }1 Çê ín íÄ íâ í¡ ò# π( π: πC πí ø	  ß  π  ¬ À –z ﬁG             8             ﬁP